# The PEP 484 type hints stub file for the QtStackedBars3D module.
#
# Generated by SIP 4.19.12
#
# Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
# 
# This file is part of PyQtStackedBars3D.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


import typing
import sip

from PyQt5 import QtGui

# Support for QDate, QDateTime and QTime.
import datetime

# Convenient type aliases.
PYQT_SIGNAL = typing.Union[QtCore.pyqtSignal, QtCore.pyqtBoundSignal]
PYQT_SLOT = typing.Union[typing.Callable[..., None], QtCore.pyqtBoundSignal]

# Convenient aliases for complicated OpenGL types.
PYQT_OPENGL_ARRAY = typing.Union[typing.Sequence[int], typing.Sequence[float],
        sip.Buffer, None]
PYQT_OPENGL_BOUND_ARRAY = typing.Union[typing.Sequence[int],
        typing.Sequence[float], sip.Buffer, int, None]


class QtStackedBar3DVis(sip.simplewrapper):

    class QAbstractGraph3D(QtGui.QWindow):

        class OptimizationHint(int): ...
        OptimizationDefault = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.OptimizationHint'
        OptimizationStatic = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.OptimizationHint'

        class ElementType(int): ...
        ElementNone = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.ElementType'
        ElementSeries = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.ElementType'
        ElementAxisXLabel = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.ElementType'
        ElementAxisYLabel = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.ElementType'
        ElementAxisZLabel = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.ElementType'
        ElementCustomItem = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.ElementType'

        class ShadowQuality(int): ...
        ShadowQualityNone = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.ShadowQuality'
        ShadowQualityLow = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.ShadowQuality'
        ShadowQualityMedium = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.ShadowQuality'
        ShadowQualityHigh = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.ShadowQuality'
        ShadowQualitySoftLow = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.ShadowQuality'
        ShadowQualitySoftMedium = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.ShadowQuality'
        ShadowQualitySoftHigh = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.ShadowQuality'

        class SelectionFlag(int): ...
        SelectionNone = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.SelectionFlag'
        SelectionItem = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.SelectionFlag'
        SelectionRow = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.SelectionFlag'
        SelectionItemAndRow = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.SelectionFlag'
        SelectionColumn = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.SelectionFlag'
        SelectionItemAndColumn = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.SelectionFlag'
        SelectionRowAndColumn = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.SelectionFlag'
        SelectionItemRowAndColumn = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.SelectionFlag'
        SelectionSlice = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.SelectionFlag'
        SelectionMultiSeries = ... # type: 'QtStackedBar3DVis.QAbstractGraph3D.SelectionFlag'

        class SelectionFlags(sip.simplewrapper):

            @typing.overload
            def __init__(self) -> None: ...
            @typing.overload
            def __init__(self, f: typing.Union['QtStackedBar3DVis.QAbstractGraph3D.SelectionFlags', 'QtStackedBar3DVis.QAbstractGraph3D.SelectionFlag']) -> None: ...
            @typing.overload
            def __init__(self, a0: 'QtStackedBar3DVis.QAbstractGraph3D.SelectionFlags') -> None: ...

            def __hash__(self) -> int: ...
            def __bool__(self) -> int: ...
            def __invert__(self) -> 'QtStackedBar3DVis.QAbstractGraph3D.SelectionFlags': ...
            def __int__(self) -> int: ...

        class OptimizationHints(sip.simplewrapper):

            @typing.overload
            def __init__(self) -> None: ...
            @typing.overload
            def __init__(self, f: typing.Union['QtStackedBar3DVis.QAbstractGraph3D.OptimizationHints', 'QtStackedBar3DVis.QAbstractGraph3D.OptimizationHint']) -> None: ...
            @typing.overload
            def __init__(self, a0: 'QtStackedBar3DVis.QAbstractGraph3D.OptimizationHints') -> None: ...

            def __hash__(self) -> int: ...
            def __bool__(self) -> int: ...
            def __invert__(self) -> 'QtStackedBar3DVis.QAbstractGraph3D.OptimizationHints': ...
            def __int__(self) -> int: ...

        def hasContext(self) -> bool: ...
        def marginChanged(self, margin: float) -> None: ...
        def queriedGraphPositionChanged(self, data: QtGui.QVector3D) -> None: ...
        def localeChanged(self, locale: QtCore.QLocale) -> None: ...
        def reflectivityChanged(self, reflectivity: float) -> None: ...
        def reflectionChanged(self, enabled: bool) -> None: ...
        def horizontalAspectRatioChanged(self, ratio: float) -> None: ...
        def radialLabelOffsetChanged(self, offset: float) -> None: ...
        def polarChanged(self, enabled: bool) -> None: ...
        def margin(self) -> float: ...
        def setMargin(self, margin: float) -> None: ...
        def queriedGraphPosition(self) -> QtGui.QVector3D: ...
        def locale(self) -> QtCore.QLocale: ...
        def setLocale(self, locale: QtCore.QLocale) -> None: ...
        def reflectivity(self) -> float: ...
        def setReflectivity(self, reflectivity: float) -> None: ...
        def isReflection(self) -> bool: ...
        def setReflection(self, enable: bool) -> None: ...
        def horizontalAspectRatio(self) -> float: ...
        def setHorizontalAspectRatio(self, ratio: float) -> None: ...
        def radialLabelOffset(self) -> float: ...
        def setRadialLabelOffset(self, offset: float) -> None: ...
        def isPolar(self) -> bool: ...
        def setPolar(self, enable: bool) -> None: ...
        def customItems(self) -> typing.Any: ...
        def optimizationHintsChanged(self, hints: typing.Union['QtStackedBar3DVis.QAbstractGraph3D.OptimizationHints', 'QtStackedBar3DVis.QAbstractGraph3D.OptimizationHint']) -> None: ...
        def aspectRatioChanged(self, ratio: float) -> None: ...
        def orthoProjectionChanged(self, enabled: bool) -> None: ...
        def currentFpsChanged(self, fps: float) -> None: ...
        def measureFpsChanged(self, enabled: bool) -> None: ...
        def optimizationHints(self) -> 'QtStackedBar3DVis.QAbstractGraph3D.OptimizationHints': ...
        def setOptimizationHints(self, hints: typing.Union['QtStackedBar3DVis.QAbstractGraph3D.OptimizationHints', 'QtStackedBar3DVis.QAbstractGraph3D.OptimizationHint']) -> None: ...
        def aspectRatio(self) -> float: ...
        def setAspectRatio(self, ratio: float) -> None: ...
        def selectedElement(self) -> 'QtStackedBar3DVis.QAbstractGraph3D.ElementType': ...
        def isOrthoProjection(self) -> bool: ...
        def setOrthoProjection(self, enable: bool) -> None: ...
        def currentFps(self) -> float: ...
        def measureFps(self) -> bool: ...
        def setMeasureFps(self, enable: bool) -> None: ...
        def renderToImage(self, msaaSamples: int = ..., imageSize: QtCore.QSize = ...) -> QtGui.QImage: ...
        def selectedCustomItem(self) -> 'QtStackedBar3DVis.QCustomItem3D': ...
        def selectedCustomItemIndex(self) -> int: ...
        def selectedAxis(self) -> 'QtStackedBar3DVis.QAbstractAxis3D': ...
        def selectedLabelIndex(self) -> int: ...
        def releaseCustomItem(self, item: 'QtStackedBar3DVis.QCustomItem3D') -> None: ...
        def removeCustomItemAt(self, position: QtGui.QVector3D) -> None: ...
        def removeCustomItem(self, item: 'QtStackedBar3DVis.QCustomItem3D') -> None: ...
        def removeCustomItems(self) -> None: ...
        def addCustomItem(self, item: 'QtStackedBar3DVis.QCustomItem3D') -> int: ...
        def wheelEvent(self, event: QtGui.QWheelEvent) -> None: ...
        def mouseMoveEvent(self, event: QtGui.QMouseEvent) -> None: ...
        def mouseReleaseEvent(self, event: QtGui.QMouseEvent) -> None: ...
        def mousePressEvent(self, event: QtGui.QMouseEvent) -> None: ...
        def touchEvent(self, event: QtGui.QTouchEvent) -> None: ...
        def mouseDoubleClickEvent(self, event: QtGui.QMouseEvent) -> None: ...
        def exposeEvent(self, event: QtGui.QExposeEvent) -> None: ...
        def resizeEvent(self, event: QtGui.QResizeEvent) -> None: ...
        def event(self, event: QtCore.QEvent) -> bool: ...
        def shadowQualityChanged(self, quality: 'QtStackedBar3DVis.QAbstractGraph3D.ShadowQuality') -> None: ...
        def selectionModeChanged(self, mode: typing.Union['QtStackedBar3DVis.QAbstractGraph3D.SelectionFlags', 'QtStackedBar3DVis.QAbstractGraph3D.SelectionFlag']) -> None: ...
        def activeThemeChanged(self, theme: 'QtStackedBar3DVis.QTheme3D') -> None: ...
        def activeInputHandlerChanged(self, inputHandler: 'QtStackedBar3DVis.QAbstractInputHandler3D') -> None: ...
        def shadowsSupported(self) -> bool: ...
        def activeInputHandler(self) -> 'QtStackedBar3DVis.QAbstractInputHandler3D': ...
        def clearSelection(self) -> None: ...
        def scene(self) -> 'QtStackedBar3DVis.QScene3D': ...
        def shadowQuality(self) -> 'QtStackedBar3DVis.QAbstractGraph3D.ShadowQuality': ...
        def setShadowQuality(self, quality: 'QtStackedBar3DVis.QAbstractGraph3D.ShadowQuality') -> None: ...
        def selectionMode(self) -> 'QtStackedBar3DVis.QAbstractGraph3D.SelectionFlags': ...
        def setSelectionMode(self, mode: typing.Union['QtStackedBar3DVis.QAbstractGraph3D.SelectionFlags', 'QtStackedBar3DVis.QAbstractGraph3D.SelectionFlag']) -> None: ...
        def themes(self) -> typing.Any: ...
        def activeTheme(self) -> 'QtStackedBar3DVis.QTheme3D': ...
        def setActiveTheme(self, theme: 'QtStackedBar3DVis.QTheme3D') -> None: ...
        def releaseTheme(self, theme: 'QtStackedBar3DVis.QTheme3D') -> None: ...
        def addTheme(self, theme: 'QtStackedBar3DVis.QTheme3D') -> None: ...
        def inputHandlers(self) -> typing.Any: ...
        def setActiveInputHandler(self, inputHandler: 'QtStackedBar3DVis.QAbstractInputHandler3D') -> None: ...
        def releaseInputHandler(self, inputHandler: 'QtStackedBar3DVis.QAbstractInputHandler3D') -> None: ...
        def addInputHandler(self, inputHandler: 'QtStackedBar3DVis.QAbstractInputHandler3D') -> None: ...

    class QBars3D('QtStackedBar3DVis.QAbstractGraph3D'):

        def __init__(self, format: typing.Optional[QtGui.QSurfaceFormat] = ..., parent: typing.Optional[QtGui.QWindow] = ...) -> None: ...

        def floorLevelChanged(self, level: float) -> None: ...
        def floorLevel(self) -> float: ...
        def setFloorLevel(self, level: float) -> None: ...
        def selectedSeriesChanged(self, series: 'QtStackedBar3DVis.QBarSeries3D') -> None: ...
        def primarySeriesChanged(self, series: 'QtStackedBar3DVis.QBarSeries3D') -> None: ...
        def valueAxisChanged(self, axis: 'QtStackedBar3DVis.QValueAxis3D') -> None: ...
        def columnAxisChanged(self, axis: 'QtStackedBar3DVis.QCategoryAxis3D') -> None: ...
        def rowAxisChanged(self, axis: 'QtStackedBar3DVis.QCategoryAxis3D') -> None: ...
        def barSpacingRelativeChanged(self, relative: bool) -> None: ...
        def barSpacingChanged(self, spacing: QtCore.QSizeF) -> None: ...
        def barThicknessChanged(self, thicknessRatio: float) -> None: ...
        def multiSeriesUniformChanged(self, uniform: bool) -> None: ...
        def selectedSeries(self) -> 'QtStackedBar3DVis.QBarSeries3D': ...
        def axes(self) -> typing.Any: ...
        def releaseAxis(self, axis: 'QtStackedBar3DVis.QAbstractAxis3D') -> None: ...
        def addAxis(self, axis: 'QtStackedBar3DVis.QAbstractAxis3D') -> None: ...
        def valueAxis(self) -> 'QtStackedBar3DVis.QValueAxis3D': ...
        def setValueAxis(self, axis: 'QtStackedBar3DVis.QValueAxis3D') -> None: ...
        def columnAxis(self) -> 'QtStackedBar3DVis.QCategoryAxis3D': ...
        def setColumnAxis(self, axis: 'QtStackedBar3DVis.QCategoryAxis3D') -> None: ...
        def rowAxis(self) -> 'QtStackedBar3DVis.QCategoryAxis3D': ...
        def setRowAxis(self, axis: 'QtStackedBar3DVis.QCategoryAxis3D') -> None: ...
        def isBarSpacingRelative(self) -> bool: ...
        def setBarSpacingRelative(self, relative: bool) -> None: ...
        def barSpacing(self) -> QtCore.QSizeF: ...
        def setBarSpacing(self, spacing: QtCore.QSizeF) -> None: ...
        def barThickness(self) -> float: ...
        def setBarThickness(self, thicknessRatio: float) -> None: ...
        def isMultiSeriesUniform(self) -> bool: ...
        def setMultiSeriesUniform(self, uniform: bool) -> None: ...
        def seriesList(self) -> typing.Any: ...
        def insertSeries(self, index: int, series: 'QtStackedBar3DVis.QBarSeries3D') -> None: ...
        def removeSeries(self, series: 'QtStackedBar3DVis.QBarSeries3D') -> None: ...
        def addSeries(self, series: 'QtStackedBar3DVis.QBarSeries3D') -> None: ...
        def primarySeries(self) -> 'QtStackedBar3DVis.QBarSeries3D': ...
        def setPrimarySeries(self, series: 'QtStackedBar3DVis.QBarSeries3D') -> None: ...

    class QStackedBars3D('QtStackedBar3DVis.QAbstractGraph3D'):

        def __init__(self, format: typing.Optional[QtGui.QSurfaceFormat] = ..., parent: typing.Optional[QtGui.QWindow] = ...) -> None: ...

        def floorLevelChanged(self, level: float) -> None: ...
        def floorLevel(self) -> float: ...
        def setFloorLevel(self, level: float) -> None: ...
        def selectedSeriesChanged(self, series: 'QtStackedBar3DVis.QStackedBarSeries3D') -> None: ...
        def primarySeriesChanged(self, series: 'QtStackedBar3DVis.QStackedBarSeries3D') -> None: ...
        def valueAxisChanged(self, axis: 'QtStackedBar3DVis.QValueAxis3D') -> None: ...
        def columnAxisChanged(self, axis: 'QtStackedBar3DVis.QCategoryAxis3D') -> None: ...
        def rowAxisChanged(self, axis: 'QtStackedBar3DVis.QCategoryAxis3D') -> None: ...
        def barSpacingRelativeChanged(self, relative: bool) -> None: ...
        def barSpacingChanged(self, spacing: QtCore.QSizeF) -> None: ...
        def barThicknessChanged(self, thicknessRatio: float) -> None: ...
        def multiSeriesUniformChanged(self, uniform: bool) -> None: ...
        def selectedSeries(self) -> 'QtStackedBar3DVis.QStackedBarSeries3D': ...
        def axes(self) -> typing.List['QtStackedBar3DVis.QAbstractAxis3D']: ...
        def releaseAxis(self, axis: 'QtStackedBar3DVis.QAbstractAxis3D') -> None: ...
        def addAxis(self, axis: 'QtStackedBar3DVis.QAbstractAxis3D') -> None: ...
        def valueAxis(self) -> 'QtStackedBar3DVis.QValueAxis3D': ...
        def setValueAxis(self, axis: 'QtStackedBar3DVis.QValueAxis3D') -> None: ...
        def columnAxis(self) -> 'QtStackedBar3DVis.QCategoryAxis3D': ...
        def setColumnAxis(self, axis: 'QtStackedBar3DVis.QCategoryAxis3D') -> None: ...
        def rowAxis(self) -> 'QtStackedBar3DVis.QCategoryAxis3D': ...
        def setRowAxis(self, axis: 'QtStackedBar3DVis.QCategoryAxis3D') -> None: ...
        def isBarSpacingRelative(self) -> bool: ...
        def setBarSpacingRelative(self, relative: bool) -> None: ...
        def barSpacing(self) -> QtCore.QSizeF: ...
        def setBarSpacing(self, spacing: QtCore.QSizeF) -> None: ...
        def barThickness(self) -> float: ...
        def setBarThickness(self, thicknessRatio: float) -> None: ...
        def isMultiSeriesUniform(self) -> bool: ...
        def setMultiSeriesUniform(self, uniform: bool) -> None: ...
        def seriesList(self) -> typing.Any: ...
        def insertSeries(self, index: int, series: 'QtStackedBar3DVis.QStackedBarSeries3D') -> None: ...
        def removeSeries(self, series: 'QtStackedBar3DVis.QStackedBarSeries3D') -> None: ...
        def addSeries(self, series: 'QtStackedBar3DVis.QStackedBarSeries3D') -> None: ...
        def primarySeries(self) -> 'QtStackedBar3DVis.QStackedBarSeries3D': ...
        def setPrimarySeries(self, series: 'QtStackedBar3DVis.QStackedBarSeries3D') -> None: ...

    class QObject3D(QtCore.QObject):

        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def isDirty(self) -> bool: ...
        def setDirty(self, dirty: bool) -> None: ...
        def positionChanged(self, position: QtGui.QVector3D) -> None: ...
        def setPosition(self, position: QtGui.QVector3D) -> None: ...
        def position(self) -> QtGui.QVector3D: ...
        def parentScene(self) -> 'QtStackedBar3DVis.QScene3D': ...
        def copyValuesFrom(self, source: 'QtStackedBar3DVis.QObject3D') -> None: ...

    class QCamera3D('QtStackedBar3DVis.QObject3D'):

        class CameraPreset(int): ...
        CameraPresetNone = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetFrontLow = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetFront = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetFrontHigh = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetLeftLow = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetLeft = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetLeftHigh = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetRightLow = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetRight = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetRightHigh = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetBehindLow = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetBehind = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetBehindHigh = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetIsometricLeft = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetIsometricLeftHigh = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetIsometricRight = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetIsometricRightHigh = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetDirectlyAbove = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetDirectlyAboveCW45 = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetDirectlyAboveCCW45 = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetFrontBelow = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetLeftBelow = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetRightBelow = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetBehindBelow = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'
        CameraPresetDirectlyBelow = ... # type: 'QtStackedBar3DVis.QCamera3D.CameraPreset'

        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def targetChanged(self, target: QtGui.QVector3D) -> None: ...
        def maxZoomLevelChanged(self, zoomLevel: float) -> None: ...
        def minZoomLevelChanged(self, zoomLevel: float) -> None: ...
        def setTarget(self, target: QtGui.QVector3D) -> None: ...
        def target(self) -> QtGui.QVector3D: ...
        def setMaxZoomLevel(self, zoomLevel: float) -> None: ...
        def maxZoomLevel(self) -> float: ...
        def setMinZoomLevel(self, zoomLevel: float) -> None: ...
        def minZoomLevel(self) -> float: ...
        def wrapYRotationChanged(self, isEnabled: bool) -> None: ...
        def wrapXRotationChanged(self, isEnabled: bool) -> None: ...
        def cameraPresetChanged(self, preset: 'QtStackedBar3DVis.QCamera3D.CameraPreset') -> None: ...
        def zoomLevelChanged(self, zoomLevel: float) -> None: ...
        def yRotationChanged(self, rotation: float) -> None: ...
        def xRotationChanged(self, rotation: float) -> None: ...
        def setZoomLevel(self, zoomLevel: float) -> None: ...
        def zoomLevel(self) -> float: ...
        def setCameraPosition(self, horizontal: float, vertical: float, zoom: float = ...) -> None: ...
        def setCameraPreset(self, preset: 'QtStackedBar3DVis.QCamera3D.CameraPreset') -> None: ...
        def cameraPreset(self) -> 'QtStackedBar3DVis.QCamera3D.CameraPreset': ...
        def copyValuesFrom(self, source: 'QtStackedBar3DVis.QObject3D') -> None: ...
        def setWrapYRotation(self, isEnabled: bool) -> None: ...
        def wrapYRotation(self) -> bool: ...
        def setWrapXRotation(self, isEnabled: bool) -> None: ...
        def wrapXRotation(self) -> bool: ...
        def setYRotation(self, rotation: float) -> None: ...
        def yRotation(self) -> float: ...
        def setXRotation(self, rotation: float) -> None: ...
        def xRotation(self) -> float: ...

    class QAbstractInputHandler3D(QtCore.QObject):

        class InputView(int): ...
        InputViewNone = ... # type: 'QtStackedBar3DVis.QAbstractInputHandler3D.InputView'
        InputViewOnPrimary = ... # type: 'QtStackedBar3DVis.QAbstractInputHandler3D.InputView'
        InputViewOnSecondary = ... # type: 'QtStackedBar3DVis.QAbstractInputHandler3D.InputView'

        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def previousInputPos(self) -> QtCore.QPoint: ...
        def setPreviousInputPos(self, position: QtCore.QPoint) -> None: ...
        def prevDistance(self) -> int: ...
        def setPrevDistance(self, distance: int) -> None: ...
        def sceneChanged(self, scene: 'QtStackedBar3DVis.QScene3D') -> None: ...
        def inputViewChanged(self, view: 'QtStackedBar3DVis.QAbstractInputHandler3D.InputView') -> None: ...
        def positionChanged(self, position: QtCore.QPoint) -> None: ...
        def setScene(self, scene: 'QtStackedBar3DVis.QScene3D') -> None: ...
        def scene(self) -> 'QtStackedBar3DVis.QScene3D': ...
        def setInputPosition(self, position: QtCore.QPoint) -> None: ...
        def inputPosition(self) -> QtCore.QPoint: ...
        def setInputView(self, inputView: 'QtStackedBar3DVis.QAbstractInputHandler3D.InputView') -> None: ...
        def inputView(self) -> 'QtStackedBar3DVis.QAbstractInputHandler3D.InputView': ...
        def wheelEvent(self, event: QtGui.QWheelEvent) -> None: ...
        def mouseMoveEvent(self, event: QtGui.QMouseEvent, mousePos: QtCore.QPoint) -> None: ...
        def mouseReleaseEvent(self, event: QtGui.QMouseEvent, mousePos: QtCore.QPoint) -> None: ...
        def mousePressEvent(self, event: QtGui.QMouseEvent, mousePos: QtCore.QPoint) -> None: ...
        def touchEvent(self, event: QtGui.QTouchEvent) -> None: ...
        def mouseDoubleClickEvent(self, event: QtGui.QMouseEvent) -> None: ...

    class QInputHandler3D('QtStackedBar3DVis.QAbstractInputHandler3D'):

        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def zoomAtTargetEnabledChanged(self, enable: bool) -> None: ...
        def selectionEnabledChanged(self, enable: bool) -> None: ...
        def zoomEnabledChanged(self, enable: bool) -> None: ...
        def rotationEnabledChanged(self, enable: bool) -> None: ...
        def isZoomAtTargetEnabled(self) -> bool: ...
        def setZoomAtTargetEnabled(self, enable: bool) -> None: ...
        def isSelectionEnabled(self) -> bool: ...
        def setSelectionEnabled(self, enable: bool) -> None: ...
        def isZoomEnabled(self) -> bool: ...
        def setZoomEnabled(self, enable: bool) -> None: ...
        def isRotationEnabled(self) -> bool: ...
        def setRotationEnabled(self, enable: bool) -> None: ...
        def wheelEvent(self, event: QtGui.QWheelEvent) -> None: ...
        def mouseMoveEvent(self, event: QtGui.QMouseEvent, mousePos: QtCore.QPoint) -> None: ...
        def mouseReleaseEvent(self, event: QtGui.QMouseEvent, mousePos: QtCore.QPoint) -> None: ...
        def mousePressEvent(self, event: QtGui.QMouseEvent, mousePos: QtCore.QPoint) -> None: ...

    class QLight3D('QtStackedBar3DVis.QObject3D'):

        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def autoPositionChanged(self, autoPosition: bool) -> None: ...
        def isAutoPosition(self) -> bool: ...
        def setAutoPosition(self, enabled: bool) -> None: ...

    class QScene3D(QtCore.QObject):

        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def graphPositionQueryChanged(self, position: QtCore.QPoint) -> None: ...
        def graphPositionQuery(self) -> QtCore.QPoint: ...
        def setGraphPositionQuery(self, point: QtCore.QPoint) -> None: ...
        def selectionQueryPositionChanged(self, position: QtCore.QPoint) -> None: ...
        def devicePixelRatioChanged(self, pixelRatio: float) -> None: ...
        def activeLightChanged(self, light: 'QtStackedBar3DVis.QLight3D') -> None: ...
        def activeCameraChanged(self, camera: 'QtStackedBar3DVis.QCamera3D') -> None: ...
        def slicingActiveChanged(self, isSlicingActive: bool) -> None: ...
        def secondarySubviewOnTopChanged(self, isSecondaryOnTop: bool) -> None: ...
        def secondarySubViewportChanged(self, subViewport: QtCore.QRect) -> None: ...
        def primarySubViewportChanged(self, subViewport: QtCore.QRect) -> None: ...
        def viewportChanged(self, viewport: QtCore.QRect) -> None: ...
        def setDevicePixelRatio(self, pixelRatio: float) -> None: ...
        def devicePixelRatio(self) -> float: ...
        def setActiveLight(self, light: 'QtStackedBar3DVis.QLight3D') -> None: ...
        def activeLight(self) -> 'QtStackedBar3DVis.QLight3D': ...
        def setActiveCamera(self, camera: 'QtStackedBar3DVis.QCamera3D') -> None: ...
        def activeCamera(self) -> 'QtStackedBar3DVis.QCamera3D': ...
        def isSecondarySubviewOnTop(self) -> bool: ...
        def setSecondarySubviewOnTop(self, isSecondaryOnTop: bool) -> None: ...
        def isSlicingActive(self) -> bool: ...
        def setSlicingActive(self, isSlicing: bool) -> None: ...
        @staticmethod
        def invalidSelectionPoint() -> QtCore.QPoint: ...
        def selectionQueryPosition(self) -> QtCore.QPoint: ...
        def setSelectionQueryPosition(self, point: QtCore.QPoint) -> None: ...
        def isPointInSecondarySubView(self, point: QtCore.QPoint) -> bool: ...
        def setSecondarySubViewport(self, secondarySubViewport: QtCore.QRect) -> None: ...
        def secondarySubViewport(self) -> QtCore.QRect: ...
        def isPointInPrimarySubView(self, point: QtCore.QPoint) -> bool: ...
        def setPrimarySubViewport(self, primarySubViewport: QtCore.QRect) -> None: ...
        def primarySubViewport(self) -> QtCore.QRect: ...
        def viewport(self) -> QtCore.QRect: ...

    class QTheme3D(QtCore.QObject):

        class Theme(int): ...
        ThemeQt = ... # type: 'QtStackedBar3DVis.QTheme3D.Theme'
        ThemePrimaryColors = ... # type: 'QtStackedBar3DVis.QTheme3D.Theme'
        ThemeDigia = ... # type: 'QtStackedBar3DVis.QTheme3D.Theme'
        ThemeStoneMoss = ... # type: 'QtStackedBar3DVis.QTheme3D.Theme'
        ThemeArmyBlue = ... # type: 'QtStackedBar3DVis.QTheme3D.Theme'
        ThemeRetro = ... # type: 'QtStackedBar3DVis.QTheme3D.Theme'
        ThemeEbony = ... # type: 'QtStackedBar3DVis.QTheme3D.Theme'
        ThemeIsabelle = ... # type: 'QtStackedBar3DVis.QTheme3D.Theme'
        ThemeUserDefined = ... # type: 'QtStackedBar3DVis.QTheme3D.Theme'

        class ColorStyle(int): ...
        ColorStyleUniform = ... # type: 'QtStackedBar3DVis.QTheme3D.ColorStyle'
        ColorStyleObjectGradient = ... # type: 'QtStackedBar3DVis.QTheme3D.ColorStyle'
        ColorStyleRangeGradient = ... # type: 'QtStackedBar3DVis.QTheme3D.ColorStyle'

        @typing.overload
        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...
        @typing.overload
        def __init__(self, themeType: 'QtStackedBar3DVis.QTheme3D.Theme', parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def colorStyleChanged(self, style: 'QtStackedBar3DVis.QTheme3D.ColorStyle') -> None: ...
        def labelBackgroundEnabledChanged(self, enabled: bool) -> None: ...
        def gridEnabledChanged(self, enabled: bool) -> None: ...
        def backgroundEnabledChanged(self, enabled: bool) -> None: ...
        def fontChanged(self, font: QtGui.QFont) -> None: ...
        def labelBorderEnabledChanged(self, enabled: bool) -> None: ...
        def highlightLightStrengthChanged(self, strength: float) -> None: ...
        def ambientLightStrengthChanged(self, strength: float) -> None: ...
        def lightStrengthChanged(self, strength: float) -> None: ...
        def multiHighlightGradientChanged(self, gradient: QtGui.QLinearGradient) -> None: ...
        def singleHighlightGradientChanged(self, gradient: QtGui.QLinearGradient) -> None: ...
        def baseGradientsChanged(self, gradients: typing.Iterable[QtGui.QLinearGradient]) -> None: ...
        def lightColorChanged(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def multiHighlightColorChanged(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def singleHighlightColorChanged(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def gridLineColorChanged(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def labelBackgroundColorChanged(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def labelTextColorChanged(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def windowColorChanged(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def backgroundColorChanged(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def baseColorsChanged(self, colors: typing.Iterable[typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]]) -> None: ...
        def typeChanged(self, themeType: 'QtStackedBar3DVis.QTheme3D.Theme') -> None: ...
        def colorStyle(self) -> 'QtStackedBar3DVis.QTheme3D.ColorStyle': ...
        def setColorStyle(self, style: 'QtStackedBar3DVis.QTheme3D.ColorStyle') -> None: ...
        def isLabelBackgroundEnabled(self) -> bool: ...
        def setLabelBackgroundEnabled(self, enabled: bool) -> None: ...
        def isGridEnabled(self) -> bool: ...
        def setGridEnabled(self, enabled: bool) -> None: ...
        def isBackgroundEnabled(self) -> bool: ...
        def setBackgroundEnabled(self, enabled: bool) -> None: ...
        def font(self) -> QtGui.QFont: ...
        def setFont(self, font: QtGui.QFont) -> None: ...
        def isLabelBorderEnabled(self) -> bool: ...
        def setLabelBorderEnabled(self, enabled: bool) -> None: ...
        def highlightLightStrength(self) -> float: ...
        def setHighlightLightStrength(self, strength: float) -> None: ...
        def ambientLightStrength(self) -> float: ...
        def setAmbientLightStrength(self, strength: float) -> None: ...
        def lightStrength(self) -> float: ...
        def setLightStrength(self, strength: float) -> None: ...
        def multiHighlightGradient(self) -> QtGui.QLinearGradient: ...
        def setMultiHighlightGradient(self, gradient: QtGui.QLinearGradient) -> None: ...
        def singleHighlightGradient(self) -> QtGui.QLinearGradient: ...
        def setSingleHighlightGradient(self, gradient: QtGui.QLinearGradient) -> None: ...
        def baseGradients(self) -> typing.List[QtGui.QLinearGradient]: ...
        def setBaseGradients(self, gradients: typing.Any) -> None: ...
        def lightColor(self) -> QtGui.QColor: ...
        def setLightColor(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def multiHighlightColor(self) -> QtGui.QColor: ...
        def setMultiHighlightColor(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def singleHighlightColor(self) -> QtGui.QColor: ...
        def setSingleHighlightColor(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def gridLineColor(self) -> QtGui.QColor: ...
        def setGridLineColor(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def labelBackgroundColor(self) -> QtGui.QColor: ...
        def setLabelBackgroundColor(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def labelTextColor(self) -> QtGui.QColor: ...
        def setLabelTextColor(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def windowColor(self) -> QtGui.QColor: ...
        def setWindowColor(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def backgroundColor(self) -> QtGui.QColor: ...
        def setBackgroundColor(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def baseColors(self) -> typing.List[QtGui.QColor]: ...
        def setBaseColors(self, colors: typing.Any) -> None: ...
        def type(self) -> 'QtStackedBar3DVis.QTheme3D.Theme': ...
        def setType(self, themeType: 'QtStackedBar3DVis.QTheme3D.Theme') -> None: ...

    class QAbstractAxis3D(QtCore.QObject):

        class AxisType(int): ...
        AxisTypeNone = ... # type: 'QtStackedBar3DVis.QAbstractAxis3D.AxisType'
        AxisTypeCategory = ... # type: 'QtStackedBar3DVis.QAbstractAxis3D.AxisType'
        AxisTypeValue = ... # type: 'QtStackedBar3DVis.QAbstractAxis3D.AxisType'

        class AxisOrientation(int): ...
        AxisOrientationNone = ... # type: 'QtStackedBar3DVis.QAbstractAxis3D.AxisOrientation'
        AxisOrientationX = ... # type: 'QtStackedBar3DVis.QAbstractAxis3D.AxisOrientation'
        AxisOrientationY = ... # type: 'QtStackedBar3DVis.QAbstractAxis3D.AxisOrientation'
        AxisOrientationZ = ... # type: 'QtStackedBar3DVis.QAbstractAxis3D.AxisOrientation'

        def titleFixedChanged(self, fixed: bool) -> None: ...
        def titleVisibilityChanged(self, visible: bool) -> None: ...
        def labelAutoRotationChanged(self, angle: float) -> None: ...
        def isTitleFixed(self) -> bool: ...
        def setTitleFixed(self, fixed: bool) -> None: ...
        def isTitleVisible(self) -> bool: ...
        def setTitleVisible(self, visible: bool) -> None: ...
        def labelAutoRotation(self) -> float: ...
        def setLabelAutoRotation(self, angle: float) -> None: ...
        def autoAdjustRangeChanged(self, autoAdjust: bool) -> None: ...
        def rangeChanged(self, min: float, max: float) -> None: ...
        def maxChanged(self, value: float) -> None: ...
        def minChanged(self, value: float) -> None: ...
        def orientationChanged(self, orientation: 'QtStackedBar3DVis.QAbstractAxis3D.AxisOrientation') -> None: ...
        def labelsChanged(self) -> None: ...
        def titleChanged(self, newTitle: str) -> None: ...
        def setTitle(self, title: str) -> None: ...
        def setRange(self, min: float, max: float) -> None: ...
        def isAutoAdjustRange(self) -> bool: ...
        def setAutoAdjustRange(self, autoAdjust: bool) -> None: ...
        def max(self) -> float: ...
        def setMax(self, max: float) -> None: ...
        def min(self) -> float: ...
        def setMin(self, min: float) -> None: ...
        def type(self) -> 'QtStackedBar3DVis.QAbstractAxis3D.AxisType': ...
        def orientation(self) -> 'QtStackedBar3DVis.QAbstractAxis3D.AxisOrientation': ...
        def labels(self) -> typing.List[str]: ...
        def setLabels(self, labels: typing.Iterable[str]) -> None: ...
        def title(self) -> str: ...

    class QAbstractSeries3D(QtCore.QObject):

        class Mesh(int): ...
        MeshUserDefined = ... # type: 'QtStackedBar3DVis.QAbstractSeries3D.Mesh'
        MeshBar = ... # type: 'QtStackedBar3DVis.QAbstractSeries3D.Mesh'
        MeshCube = ... # type: 'QtStackedBar3DVis.QAbstractSeries3D.Mesh'
        MeshPyramid = ... # type: 'QtStackedBar3DVis.QAbstractSeries3D.Mesh'
        MeshCone = ... # type: 'QtStackedBar3DVis.QAbstractSeries3D.Mesh'
        MeshCylinder = ... # type: 'QtStackedBar3DVis.QAbstractSeries3D.Mesh'
        MeshBevelBar = ... # type: 'QtStackedBar3DVis.QAbstractSeries3D.Mesh'
        MeshBevelCube = ... # type: 'QtStackedBar3DVis.QAbstractSeries3D.Mesh'
        MeshSphere = ... # type: 'QtStackedBar3DVis.QAbstractSeries3D.Mesh'
        MeshMinimal = ... # type: 'QtStackedBar3DVis.QAbstractSeries3D.Mesh'
        MeshArrow = ... # type: 'QtStackedBar3DVis.QAbstractSeries3D.Mesh'
        MeshPoint = ... # type: 'QtStackedBar3DVis.QAbstractSeries3D.Mesh'

        class SeriesType(int): ...
        SeriesTypeNone = ... # type: 'QtStackedBar3DVis.QAbstractSeries3D.SeriesType'
        SeriesTypeBar = ... # type: 'QtStackedBar3DVis.QAbstractSeries3D.SeriesType'
        SeriesTypeScatter = ... # type: 'QtStackedBar3DVis.QAbstractSeries3D.SeriesType'
        SeriesTypeSurface = ... # type: 'QtStackedBar3DVis.QAbstractSeries3D.SeriesType'

        def itemLabelVisibilityChanged(self, visible: bool) -> None: ...
        def itemLabelChanged(self, label: str) -> None: ...
        def isItemLabelVisible(self) -> bool: ...
        def setItemLabelVisible(self, visible: bool) -> None: ...
        def itemLabel(self) -> str: ...
        def nameChanged(self, name: str) -> None: ...
        def multiHighlightGradientChanged(self, gradient: QtGui.QLinearGradient) -> None: ...
        def multiHighlightColorChanged(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def singleHighlightGradientChanged(self, gradient: QtGui.QLinearGradient) -> None: ...
        def singleHighlightColorChanged(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def baseGradientChanged(self, gradient: QtGui.QLinearGradient) -> None: ...
        def baseColorChanged(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def colorStyleChanged(self, style: 'QtStackedBar3DVis.QTheme3D.ColorStyle') -> None: ...
        def userDefinedMeshChanged(self, fileName: str) -> None: ...
        def meshRotationChanged(self, rotation: QtGui.QQuaternion) -> None: ...
        def meshSmoothChanged(self, enabled: bool) -> None: ...
        def meshChanged(self, mesh: 'QtStackedBar3DVis.QAbstractSeries3D.Mesh') -> None: ...
        def visibilityChanged(self, visible: bool) -> None: ...
        def itemLabelFormatChanged(self, format: str) -> None: ...
        def setMeshAxisAndAngle(self, axis: QtGui.QVector3D, angle: float) -> None: ...
        def name(self) -> str: ...
        def setName(self, name: str) -> None: ...
        def multiHighlightGradient(self) -> QtGui.QLinearGradient: ...
        def setMultiHighlightGradient(self, gradient: QtGui.QLinearGradient) -> None: ...
        def multiHighlightColor(self) -> QtGui.QColor: ...
        def setMultiHighlightColor(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def singleHighlightGradient(self) -> QtGui.QLinearGradient: ...
        def setSingleHighlightGradient(self, gradient: QtGui.QLinearGradient) -> None: ...
        def singleHighlightColor(self) -> QtGui.QColor: ...
        def setSingleHighlightColor(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def baseGradient(self) -> QtGui.QLinearGradient: ...
        def setBaseGradient(self, gradient: QtGui.QLinearGradient) -> None: ...
        def baseColor(self) -> QtGui.QColor: ...
        def setBaseColor(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def colorStyle(self) -> 'QtStackedBar3DVis.QTheme3D.ColorStyle': ...
        def setColorStyle(self, style: 'QtStackedBar3DVis.QTheme3D.ColorStyle') -> None: ...
        def userDefinedMesh(self) -> str: ...
        def setUserDefinedMesh(self, fileName: str) -> None: ...
        def meshRotation(self) -> QtGui.QQuaternion: ...
        def setMeshRotation(self, rotation: QtGui.QQuaternion) -> None: ...
        def isMeshSmooth(self) -> bool: ...
        def setMeshSmooth(self, enable: bool) -> None: ...
        def mesh(self) -> 'QtStackedBar3DVis.QAbstractSeries3D.Mesh': ...
        def setMesh(self, mesh: 'QtStackedBar3DVis.QAbstractSeries3D.Mesh') -> None: ...
        def isVisible(self) -> bool: ...
        def setVisible(self, visible: bool) -> None: ...
        def itemLabelFormat(self) -> str: ...
        def setItemLabelFormat(self, format: str) -> None: ...
        def type(self) -> 'QtStackedBar3DVis.QAbstractSeries3D.SeriesType': ...

    class QAbstractDataProxy3D(QtCore.QObject):

        class DataType(int): ...
        DataTypeNone = ... # type: 'QtStackedBar3DVis.QAbstractDataProxy3D.DataType'
        DataTypeBar = ... # type: 'QtStackedBar3DVis.QAbstractDataProxy3D.DataType'
        DataTypeScatter = ... # type: 'QtStackedBar3DVis.QAbstractDataProxy3D.DataType'
        DataTypeSurface = ... # type: 'QtStackedBar3DVis.QAbstractDataProxy3D.DataType'

        def type(self) -> 'QtStackedBar3DVis.QAbstractDataProxy3D.DataType': ...

    class QBarSeries3D('QtStackedBar3DVis.QAbstractSeries3D'):

        @typing.overload
        def __init__(self, dataProxy: 'QtStackedBar3DVis.QBarDataProxy3D', parent: typing.Optional[QtCore.QObject] = ...) -> None: ...
        @typing.overload
        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def meshAngleChanged(self, angle: float) -> None: ...
        def selectedBarChanged(self, position: QtCore.QPoint) -> None: ...
        def dataProxyChanged(self, proxy: 'QtStackedBar3DVis.QBarDataProxy3D') -> None: ...
        def meshAngle(self) -> float: ...
        def setMeshAngle(self, angle: float) -> None: ...
        @staticmethod
        def invalidSelectionPosition() -> QtCore.QPoint: ...
        def selectedBar(self) -> QtCore.QPoint: ...
        def setSelectedBar(self, position: QtCore.QPoint) -> None: ...
        def dataProxy(self) -> 'QtStackedBar3DVis.QBarDataProxy3D': ...
        def setDataProxy(self, proxy: 'QtStackedBar3DVis.QBarDataProxy3D') -> None: ...

    class QBarDataItem3D(sip.simplewrapper):

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, value: float) -> None: ...
        @typing.overload
        def __init__(self, value: float, angle: float) -> None: ...
        @typing.overload
        def __init__(self, other: 'QtStackedBar3DVis.QBarDataItem3D') -> None: ...

        def rotation(self) -> float: ...
        def setRotation(self, angle: float) -> None: ...
        def value(self) -> float: ...
        def setValue(self, value: float) -> None: ...

    class QBarDataProxy3D('QtStackedBar3DVis.QAbstractDataProxy3D'):

        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def seriesChanged(self, series: 'QtStackedBar3DVis.QBarSeries3D') -> None: ...
        def columnLabelsChanged(self) -> None: ...
        def rowLabelsChanged(self) -> None: ...
        def rowCountChanged(self, count: int) -> None: ...
        def itemChanged(self, rowIndex: int, columnIndex: int) -> None: ...
        def rowsInserted(self, startIndex: int, count: int) -> None: ...
        def rowsRemoved(self, startIndex: int, count: int) -> None: ...
        def rowsChanged(self, startIndex: int, count: int) -> None: ...
        def rowsAdded(self, startIndex: int, count: int) -> None: ...
        def arrayReset(self) -> None: ...
        def series(self) -> 'QtStackedBar3DVis.QBarSeries3D': ...
        def removeRows(self, rowIndex: int, removeCount: int, removeLabels: bool = ...) -> None: ...
        @typing.overload
        def insertRows(self, rowIndex: int, rows: typing.Any) -> None: ...
        @typing.overload
        def insertRows(self, rowIndex: int, rows: typing.Any, labels: typing.Iterable[str]) -> None: ...
        @typing.overload
        def insertRow(self, rowIndex: int, row: typing.Any) -> None: ...
        @typing.overload
        def insertRow(self, rowIndex: int, row: typing.Any, label: str) -> None: ...
        @typing.overload
        def addRows(self, rows: typing.Any) -> int: ...
        @typing.overload
        def addRows(self, rows: typing.Any, labels: typing.Iterable[str]) -> int: ...
        @typing.overload
        def addRow(self, row: typing.Any) -> int: ...
        @typing.overload
        def addRow(self, row: typing.Any, label: str) -> int: ...
        @typing.overload
        def setItem(self, rowIndex: int, columnIndex: int, item: 'QtStackedBar3DVis.QBarDataItem3D') -> None: ...
        @typing.overload
        def setItem(self, position: QtCore.QPoint, item: 'QtStackedBar3DVis.QBarDataItem3D') -> None: ...
        @typing.overload
        def setRows(self, rowIndex: int, rows: typing.Any) -> None: ...
        @typing.overload
        def setRows(self, rowIndex: int, rows: typing.Any, labels: typing.Iterable[str]) -> None: ...
        @typing.overload
        def setRow(self, rowIndex: int, row: typing.Any) -> None: ...
        @typing.overload
        def setRow(self, rowIndex: int, row: typing.Any, label: str) -> None: ...
        @typing.overload
        def resetArray(self) -> None: ...
        @typing.overload
        def resetArray(self, newArray: typing.Any) -> None: ...
        @typing.overload
        def resetArray(self, newArray: typing.Any, rowLabels: typing.Iterable[str], columnLabels: typing.Iterable[str]) -> None: ...
        @typing.overload
        def itemAt(self, rowIndex: int, columnIndex: int) -> 'QtStackedBar3DVis.QBarDataItem3D': ...
        @typing.overload
        def itemAt(self, position: QtCore.QPoint) -> 'QtStackedBar3DVis.QBarDataItem3D': ...
        def rowAt(self, rowIndex: int) -> typing.Any: ...
        def array(self) -> typing.Any: ...
        def setColumnLabels(self, labels: typing.Iterable[str]) -> None: ...
        def columnLabels(self) -> typing.List[str]: ...
        def setRowLabels(self, labels: typing.Iterable[str]) -> None: ...
        def rowLabels(self) -> typing.List[str]: ...
        def rowCount(self) -> int: ...

    class QStackedBarSeries3D('QtStackedBar3DVis.QAbstractSeries3D'):

        @typing.overload
        def __init__(self, dataProxy: 'QtStackedBar3DVis.QStackedBarDataProxy3D', parent: typing.Optional[QtCore.QObject] = ...) -> None: ...
        @typing.overload
        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def meshAngleChanged(self, angle: float) -> None: ...
        def selectedBarChanged(self, position: QtCore.QPoint) -> None: ...
        def dataProxyChanged(self, proxy: 'QtStackedBar3DVis.QStackedBarDataProxy3D') -> None: ...
        def setSectionColor(self, index: int, r: int, g: int, b: int, a: int) -> None: ...
        def setSectionColors(self, sectionColors: typing.Iterable[typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]]) -> None: ...
        def sectionColors(self) -> typing.List[QtGui.QColor]: ...
        def meshAngle(self) -> float: ...
        def setMeshAngle(self, angle: float) -> None: ...
        @staticmethod
        def invalidSelectionPosition() -> QtCore.QPoint: ...
        def selectedBar(self) -> QtCore.QPoint: ...
        def setSelectedBar(self, position: QtCore.QPoint) -> None: ...
        def dataProxy(self) -> 'QtStackedBar3DVis.QStackedBarDataProxy3D': ...
        def setDataProxy(self, proxy: 'QtStackedBar3DVis.QStackedBarDataProxy3D') -> None: ...

    class QStackedBarDataItem3D(sip.simplewrapper):

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, values: typing.Iterable[float]) -> None: ...
        @typing.overload
        def __init__(self, values: typing.Iterable[float], angles: typing.Iterable[float]) -> None: ...
        @typing.overload
        def __init__(self, other: 'QtStackedBar3DVis.QStackedBarDataItem3D') -> None: ...

        def rotations(self) -> typing.List[float]: ...
        def setRotations(self, angles: typing.Iterable[float]) -> None: ...
        def values(self) -> typing.List[float]: ...
        def setValues(self, values: typing.Iterable[float]) -> None: ...

    class QStackedBarDataProxy3D('QtStackedBar3DVis.QAbstractDataProxy3D'):

        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def seriesChanged(self, series: 'QtStackedBar3DVis.QStackedBarSeries3D') -> None: ...
        def columnLabelsChanged(self) -> None: ...
        def rowLabelsChanged(self) -> None: ...
        def rowCountChanged(self, count: int) -> None: ...
        def itemChanged(self, rowIndex: int, columnIndex: int) -> None: ...
        def rowsInserted(self, startIndex: int, count: int) -> None: ...
        def rowsRemoved(self, startIndex: int, count: int) -> None: ...
        def rowsChanged(self, startIndex: int, count: int) -> None: ...
        def rowsAdded(self, startIndex: int, count: int) -> None: ...
        def arrayReset(self) -> None: ...
        def series(self) -> 'QtStackedBar3DVis.QStackedBarSeries3D': ...
        def removeRows(self, rowIndex: int, removeCount: int, removeLabels: bool = ...) -> None: ...
        @typing.overload
        def insertRows(self, rowIndex: int, rows: typing.Any) -> None: ...
        @typing.overload
        def insertRows(self, rowIndex: int, rows: typing.Any, labels: typing.Iterable[str]) -> None: ...
        @typing.overload
        def insertRow(self, rowIndex: int, row: typing.Any) -> None: ...
        @typing.overload
        def insertRow(self, rowIndex: int, row: typing.Any, label: str) -> None: ...
        @typing.overload
        def addRows(self, rows: typing.Any) -> int: ...
        @typing.overload
        def addRows(self, rows: typing.Any, labels: typing.Iterable[str]) -> int: ...
        @typing.overload
        def addRow(self, row: typing.Any) -> int: ...
        @typing.overload
        def addRow(self, row: typing.Any, label: str) -> int: ...
        @typing.overload
        def addRow(self, values: typing.Iterable[float], stride: int) -> int: ...
        @typing.overload
        def addRow(self, values: typing.Iterable[float], stride: int, label: str) -> int: ...
        @typing.overload
        def setItem(self, rowIndex: int, columnIndex: int, item: 'QtStackedBar3DVis.QStackedBarDataItem3D') -> None: ...
        @typing.overload
        def setItem(self, position: QtCore.QPoint, item: 'QtStackedBar3DVis.QStackedBarDataItem3D') -> None: ...
        @typing.overload
        def setRows(self, rowIndex: int, rows: typing.Any) -> None: ...
        @typing.overload
        def setRows(self, rowIndex: int, rows: typing.Any, labels: typing.Iterable[str]) -> None: ...
        @typing.overload
        def setRow(self, rowIndex: int, row: typing.Any) -> None: ...
        @typing.overload
        def setRow(self, rowIndex: int, row: typing.Any, label: str) -> None: ...
        @typing.overload
        def resetArray(self) -> None: ...
        @typing.overload
        def resetArray(self, newArray: typing.Any) -> None: ...
        @typing.overload
        def resetArray(self, newArray: typing.Any, rowLabels: typing.Iterable[str], columnLabels: typing.Iterable[str]) -> None: ...
        @typing.overload
        def itemAt(self, rowIndex: int, columnIndex: int) -> 'QtStackedBar3DVis.QStackedBarDataItem3D': ...
        @typing.overload
        def itemAt(self, position: QtCore.QPoint) -> 'QtStackedBar3DVis.QStackedBarDataItem3D': ...
        def rowAt(self, rowIndex: int) -> typing.Any: ...
        def array(self) -> typing.Any: ...
        def setColumnLabels(self, labels: typing.Iterable[str]) -> None: ...
        def columnLabels(self) -> typing.List[str]: ...
        def setRowLabels(self, labels: typing.Iterable[str]) -> None: ...
        def rowLabels(self) -> typing.List[str]: ...
        def rowCount(self) -> int: ...

    class QCategoryAxis3D('QtStackedBar3DVis.QAbstractAxis3D'):

        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def labelsChanged(self) -> None: ...
        def labels(self) -> typing.List[str]: ...
        def setLabels(self, labels: typing.Iterable[str]) -> None: ...

    class QCustomItem3D(QtCore.QObject):

        @typing.overload
        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...
        @typing.overload
        def __init__(self, meshFile: str, position: QtGui.QVector3D, scaling: QtGui.QVector3D, rotation: QtGui.QQuaternion, texture: QtGui.QImage, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def scalingAbsoluteChanged(self, scalingAbsolute: bool) -> None: ...
        def isScalingAbsolute(self) -> bool: ...
        def setScalingAbsolute(self, scalingAbsolute: bool) -> None: ...
        def shadowCastingChanged(self, shadowCasting: bool) -> None: ...
        def visibleChanged(self, visible: bool) -> None: ...
        def rotationChanged(self, rotation: QtGui.QQuaternion) -> None: ...
        def scalingChanged(self, scaling: QtGui.QVector3D) -> None: ...
        def positionAbsoluteChanged(self, positionAbsolute: bool) -> None: ...
        def positionChanged(self, position: QtGui.QVector3D) -> None: ...
        def textureFileChanged(self, textureFile: str) -> None: ...
        def meshFileChanged(self, meshFile: str) -> None: ...
        def setTextureImage(self, textureImage: QtGui.QImage) -> None: ...
        def setRotationAxisAndAngle(self, axis: QtGui.QVector3D, angle: float) -> None: ...
        def isShadowCasting(self) -> bool: ...
        def setShadowCasting(self, enabled: bool) -> None: ...
        def isVisible(self) -> bool: ...
        def setVisible(self, visible: bool) -> None: ...
        def rotation(self) -> QtGui.QQuaternion: ...
        def setRotation(self, rotation: QtGui.QQuaternion) -> None: ...
        def scaling(self) -> QtGui.QVector3D: ...
        def setScaling(self, scaling: QtGui.QVector3D) -> None: ...
        def isPositionAbsolute(self) -> bool: ...
        def setPositionAbsolute(self, positionAbsolute: bool) -> None: ...
        def position(self) -> QtGui.QVector3D: ...
        def setPosition(self, position: QtGui.QVector3D) -> None: ...
        def textureFile(self) -> str: ...
        def setTextureFile(self, textureFile: str) -> None: ...
        def meshFile(self) -> str: ...
        def setMeshFile(self, meshFile: str) -> None: ...

    class QCustomLabel3D('QtStackedBar3DVis.QCustomItem3D'):

        @typing.overload
        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...
        @typing.overload
        def __init__(self, text: str, font: QtGui.QFont, position: QtGui.QVector3D, scaling: QtGui.QVector3D, rotation: QtGui.QQuaternion, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def facingCameraChanged(self, enabled: bool) -> None: ...
        def backgroundEnabledChanged(self, enabled: bool) -> None: ...
        def borderEnabledChanged(self, enabled: bool) -> None: ...
        def backgroundColorChanged(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def textColorChanged(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def fontChanged(self, font: QtGui.QFont) -> None: ...
        def textChanged(self, text: str) -> None: ...
        def isFacingCamera(self) -> bool: ...
        def setFacingCamera(self, enabled: bool) -> None: ...
        def isBackgroundEnabled(self) -> bool: ...
        def setBackgroundEnabled(self, enabled: bool) -> None: ...
        def isBorderEnabled(self) -> bool: ...
        def setBorderEnabled(self, enabled: bool) -> None: ...
        def backgroundColor(self) -> QtGui.QColor: ...
        def setBackgroundColor(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def textColor(self) -> QtGui.QColor: ...
        def setTextColor(self, color: typing.Union[QtGui.QColor, QtCore.Qt.GlobalColor]) -> None: ...
        def font(self) -> QtGui.QFont: ...
        def setFont(self, font: QtGui.QFont) -> None: ...
        def text(self) -> str: ...
        def setText(self, text: str) -> None: ...

    class QSurfaceSeries3D('QtStackedBar3DVis.QAbstractSeries3D'):

        class DrawFlag(int): ...
        DrawWireframe = ... # type: 'QtStackedBar3DVis.QSurfaceSeries3D.DrawFlag'
        DrawSurface = ... # type: 'QtStackedBar3DVis.QSurfaceSeries3D.DrawFlag'
        DrawSurfaceAndWireframe = ... # type: 'QtStackedBar3DVis.QSurfaceSeries3D.DrawFlag'

        class DrawFlags(sip.simplewrapper):

            @typing.overload
            def __init__(self) -> None: ...
            @typing.overload
            def __init__(self, f: typing.Union['QtStackedBar3DVis.QSurfaceSeries3D.DrawFlags', 'QtStackedBar3DVis.QSurfaceSeries3D.DrawFlag']) -> None: ...
            @typing.overload
            def __init__(self, a0: 'QtStackedBar3DVis.QSurfaceSeries3D.DrawFlags') -> None: ...

            def __hash__(self) -> int: ...
            def __bool__(self) -> int: ...
            def __invert__(self) -> 'QtStackedBar3DVis.QSurfaceSeries3D.DrawFlags': ...
            def __int__(self) -> int: ...

        @typing.overload
        def __init__(self, dataProxy: 'QtStackedBar3DVis.QSurfaceDataProxy3D', parent: typing.Optional[QtCore.QObject] = ...) -> None: ...
        @typing.overload
        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def textureFileChanged(self, filename: str) -> None: ...
        def textureChanged(self, image: QtGui.QImage) -> None: ...
        def textureFile(self) -> str: ...
        def setTextureFile(self, filename: str) -> None: ...
        def texture(self) -> QtGui.QImage: ...
        def setTexture(self, texture: QtGui.QImage) -> None: ...
        def drawModeChanged(self, mode: typing.Union['QtStackedBar3DVis.QSurfaceSeries3D.DrawFlags', 'QtStackedBar3DVis.QSurfaceSeries3D.DrawFlag']) -> None: ...
        def flatShadingSupportedChanged(self, enable: bool) -> None: ...
        def flatShadingEnabledChanged(self, enable: bool) -> None: ...
        def selectedPointChanged(self, position: QtCore.QPoint) -> None: ...
        def dataProxyChanged(self, proxy: 'QtStackedBar3DVis.QSurfaceDataProxy3D') -> None: ...
        def isFlatShadingSupported(self) -> bool: ...
        def drawMode(self) -> 'QtStackedBar3DVis.QSurfaceSeries3D.DrawFlags': ...
        def setDrawMode(self, mode: typing.Union['QtStackedBar3DVis.QSurfaceSeries3D.DrawFlags', 'QtStackedBar3DVis.QSurfaceSeries3D.DrawFlag']) -> None: ...
        def isFlatShadingEnabled(self) -> bool: ...
        def setFlatShadingEnabled(self, enabled: bool) -> None: ...
        @staticmethod
        def invalidSelectionPosition() -> QtCore.QPoint: ...
        def selectedPoint(self) -> QtCore.QPoint: ...
        def setSelectedPoint(self, position: QtCore.QPoint) -> None: ...
        def dataProxy(self) -> 'QtStackedBar3DVis.QSurfaceDataProxy3D': ...
        def setDataProxy(self, proxy: 'QtStackedBar3DVis.QSurfaceDataProxy3D') -> None: ...

    class QSurfaceDataItem3D(sip.simplewrapper):

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, position: QtGui.QVector3D) -> None: ...
        @typing.overload
        def __init__(self, other: 'QtStackedBar3DVis.QSurfaceDataItem3D') -> None: ...

        def z(self) -> float: ...
        def y(self) -> float: ...
        def x(self) -> float: ...
        def setZ(self, value: float) -> None: ...
        def setY(self, value: float) -> None: ...
        def setX(self, value: float) -> None: ...
        def position(self) -> QtGui.QVector3D: ...
        def setPosition(self, position: QtGui.QVector3D) -> None: ...

    class QSurfaceDataProxy3D('QtStackedBar3DVis.QAbstractDataProxy3D'):

        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def seriesChanged(self, series: 'QtStackedBar3DVis.QSurfaceSeries3D') -> None: ...
        def columnCountChanged(self, count: int) -> None: ...
        def rowCountChanged(self, count: int) -> None: ...
        def itemChanged(self, rowIndex: int, columnIndex: int) -> None: ...
        def rowsInserted(self, startIndex: int, count: int) -> None: ...
        def rowsRemoved(self, startIndex: int, count: int) -> None: ...
        def rowsChanged(self, startIndex: int, count: int) -> None: ...
        def rowsAdded(self, startIndex: int, count: int) -> None: ...
        def arrayReset(self) -> None: ...
        @typing.overload
        def itemAt(self, rowIndex: int, columnIndex: int) -> 'QtStackedBar3DVis.QSurfaceDataItem3D': ...
        @typing.overload
        def itemAt(self, position: QtCore.QPoint) -> 'QtStackedBar3DVis.QSurfaceDataItem3D': ...
        def series(self) -> 'QtStackedBar3DVis.QSurfaceSeries3D': ...
        def removeRows(self, rowIndex: int, removeCount: int) -> None: ...
        def insertRows(self, rowIndex: int, rows: typing.Any) -> None: ...
        def insertRow(self, rowIndex: int, row: typing.Any) -> None: ...
        def addRows(self, rows: typing.Any) -> int: ...
        def addRow(self, row: typing.Any) -> int: ...
        @typing.overload
        def setItem(self, rowIndex: int, columnIndex: int, item: 'QtStackedBar3DVis.QSurfaceDataItem3D') -> None: ...
        @typing.overload
        def setItem(self, position: QtCore.QPoint, item: 'QtStackedBar3DVis.QSurfaceDataItem3D') -> None: ...
        def setRows(self, rowIndex: int, rows: typing.Any) -> None: ...
        def setRow(self, rowIndex: int, row: typing.Any) -> None: ...
        def resetArray(self, newArray: typing.Any) -> None: ...
        def array(self) -> typing.Any: ...
        def columnCount(self) -> int: ...
        def rowCount(self) -> int: ...

    class QTouchInputHandler3D('QtStackedBar3DVis.QInputHandler3D'):

        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def touchEvent(self, event: QtGui.QTouchEvent) -> None: ...

    class QValueAxis3D('QtStackedBar3DVis.QAbstractAxis3D'):

        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def reversedChanged(self, enable: bool) -> None: ...
        def formatterChanged(self, formatter: 'QtStackedBar3DVis.QAxisValueFormatter3D') -> None: ...
        def reversed(self) -> bool: ...
        def setReversed(self, enable: bool) -> None: ...
        def formatter(self) -> 'QtStackedBar3DVis.QAxisValueFormatter3D': ...
        def setFormatter(self, formatter: 'QtStackedBar3DVis.QAxisValueFormatter3D') -> None: ...
        def labelFormatChanged(self, format: str) -> None: ...
        def subSegmentCountChanged(self, count: int) -> None: ...
        def segmentCountChanged(self, count: int) -> None: ...
        def labelFormat(self) -> str: ...
        def setLabelFormat(self, format: str) -> None: ...
        def subSegmentCount(self) -> int: ...
        def setSubSegmentCount(self, count: int) -> None: ...
        def segmentCount(self) -> int: ...
        def setSegmentCount(self, count: int) -> None: ...

    class QAxisValueFormatter3D(QtCore.QObject):

        def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

        def locale(self) -> QtCore.QLocale: ...
        def setLocale(self, locale: QtCore.QLocale) -> None: ...
        def labelStrings(self) -> typing.List[str]: ...
        def labelPositions(self) -> typing.List[float]: ...
        def subGridPositions(self) -> typing.List[float]: ...
        def gridPositions(self) -> typing.List[float]: ...
        def axis(self) -> 'QtStackedBar3DVis.QValueAxis3D': ...
        def markDirty(self, labelsChange: bool = ...) -> None: ...
        def populateCopy(self, copy: 'QtStackedBar3DVis.QAxisValueFormatter3D') -> None: ...
        def valueAt(self, position: float) -> float: ...
        def positionAt(self, value: float) -> float: ...
        def stringForValue(self, value: float, format: str) -> str: ...
        def recalculate(self) -> None: ...
        def createNewInstance(self) -> 'QtStackedBar3DVis.QAxisValueFormatter3D': ...
        def allowZero(self) -> bool: ...
        def setAllowZero(self, allow: bool) -> None: ...
        def allowNegatives(self) -> bool: ...
        def setAllowNegatives(self, allow: bool) -> None: ...

    def qDefaultSurfaceFormat(self, antialias: bool = ...) -> QtGui.QSurfaceFormat: ...


PYQT_DATAVISUALIZATION_VERSION = ... # type: int
PYQT_DATAVISUALIZATION_VERSION_STR = ... # type: str
