// q3dbars.sip generated by MetaSIP
//
// This file is part of the QtStackedBar3DVis Python extension module.
//
// Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtStackedBar3DVis.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtStackedBar3DVis
{
%TypeHeaderCode
#include <QStackedBars3D.h>
%End

    class QStackedBars3D : QtStackedBar3DVis::QAbstractGraph3D
    {
%TypeHeaderCode
#include <QStackedBars3D.h>
%End

    public:
        QStackedBars3D(const QSurfaceFormat *format = 0, QWindow *parent /TransferThis/ = 0);
        virtual ~QStackedBars3D();
        void setPrimarySeries(QtStackedBar3DVis::QStackedBarSeries3D *series /Transfer/);
        QtStackedBar3DVis::QStackedBarSeries3D *primarySeries() const;
        void addSeries(QtStackedBar3DVis::QStackedBarSeries3D *series /Transfer/);
        void removeSeries(QtStackedBar3DVis::QStackedBarSeries3D *series /TransferBack/);
        void insertSeries(int index, QtStackedBar3DVis::QStackedBarSeries3D *series /Transfer/);
        QList<QtStackedBar3DVis::QStackedBarSeries3D *> seriesList() const;
        void setMultiSeriesUniform(bool uniform);
        bool isMultiSeriesUniform() const;
        void setBarThickness(float thicknessRatio);
        float barThickness() const;
        void setBarSpacing(const QSizeF &spacing);
        QSizeF barSpacing() const;
        void setBarSpacingRelative(bool relative);
        bool isBarSpacingRelative() const;
        void setRowAxis(QtStackedBar3DVis::QCategoryAxis3D *axis /Transfer/);
        QtStackedBar3DVis::QCategoryAxis3D *rowAxis() const;
        void setColumnAxis(QtStackedBar3DVis::QCategoryAxis3D *axis /Transfer/);
        QtStackedBar3DVis::QCategoryAxis3D *columnAxis() const;
        void setValueAxis(QtStackedBar3DVis::QValueAxis3D *axis /Transfer/);
        QtStackedBar3DVis::QValueAxis3D *valueAxis() const;
        void addAxis(QtStackedBar3DVis::QAbstractAxis3D *axis /Transfer/);
        void releaseAxis(QtStackedBar3DVis::QAbstractAxis3D *axis /TransferBack/);
        QList<QtStackedBar3DVis::QAbstractAxis3D *> axes() const;
        QtStackedBar3DVis::QStackedBarSeries3D *selectedSeries() const;

    signals:
        void multiSeriesUniformChanged(bool uniform);
        void barThicknessChanged(float thicknessRatio);
        void barSpacingChanged(const QSizeF &spacing);
        void barSpacingRelativeChanged(bool relative);
        void rowAxisChanged(QtStackedBar3DVis::QCategoryAxis3D *axis /ScopesStripped=1/);
        void columnAxisChanged(QtStackedBar3DVis::QCategoryAxis3D *axis /ScopesStripped=1/);
        void valueAxisChanged(QtStackedBar3DVis::QValueAxis3D *axis /ScopesStripped=1/);
        void primarySeriesChanged(QtStackedBar3DVis::QStackedBarSeries3D *series /ScopesStripped=1/);
        void selectedSeriesChanged(QtStackedBar3DVis::QStackedBarSeries3D *series /ScopesStripped=1/);

    public:

        void setFloorLevel(float level);
        float floorLevel() const;

    signals:
        void floorLevelChanged(float level);
    };
};
