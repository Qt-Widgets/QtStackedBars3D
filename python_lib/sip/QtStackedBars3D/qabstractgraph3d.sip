// QAbstractGraph3D.sip generated by MetaSIP
//
// This file is part of the QtStackedBar3DVis Python extension module.
//
// Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtStackedBar3DVis.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtStackedBar3DVis
{
%TypeHeaderCode
#include <QAbstractGraph3D.h>
%End

    class QAbstractGraph3D : QWindow /NoDefaultCtors/
    {
%TypeHeaderCode
#include <QAbstractGraph3D.h>
%End

    public:
        enum SelectionFlag
        {
            SelectionNone,
            SelectionItem,
            SelectionRow,
            SelectionItemAndRow,
            SelectionColumn,
            SelectionItemAndColumn,
            SelectionRowAndColumn,
            SelectionItemRowAndColumn,
            SelectionSlice,
            SelectionMultiSeries,
        };

        typedef QFlags<QtStackedBar3DVis::QAbstractGraph3D::SelectionFlag> SelectionFlags;

        enum ShadowQuality
        {
            ShadowQualityNone,
            ShadowQualityLow,
            ShadowQualityMedium,
            ShadowQualityHigh,
            ShadowQualitySoftLow,
            ShadowQualitySoftMedium,
            ShadowQualitySoftHigh,
        };

        virtual ~QAbstractGraph3D();
        void addInputHandler(QtStackedBar3DVis::QAbstractInputHandler3D *inputHandler /Transfer/);
        void releaseInputHandler(QtStackedBar3DVis::QAbstractInputHandler3D *inputHandler /TransferBack/);
        void setActiveInputHandler(QtStackedBar3DVis::QAbstractInputHandler3D *inputHandler /Transfer/);
        QList<QtStackedBar3DVis::QAbstractInputHandler3D *> inputHandlers() const;
        void addTheme(QtStackedBar3DVis::QTheme3D *theme /Transfer/);
        void releaseTheme(QtStackedBar3DVis::QTheme3D *theme /TransferBack/);
        void setActiveTheme(QtStackedBar3DVis::QTheme3D *theme /Transfer/);
        QtStackedBar3DVis::QTheme3D *activeTheme() const;
        QList<QtStackedBar3DVis::QTheme3D *> themes() const;
        void setSelectionMode(QtStackedBar3DVis::QAbstractGraph3D::SelectionFlags mode);
        QtStackedBar3DVis::QAbstractGraph3D::SelectionFlags selectionMode() const;
        void setShadowQuality(QtStackedBar3DVis::QAbstractGraph3D::ShadowQuality quality);
        QtStackedBar3DVis::QAbstractGraph3D::ShadowQuality shadowQuality() const;
        QtStackedBar3DVis::QScene3D *scene() const;
        void clearSelection();
        QtStackedBar3DVis::QAbstractInputHandler3D *activeInputHandler() const;
        virtual bool shadowsSupported() const;

    signals:
        void activeInputHandlerChanged(QtStackedBar3DVis::QAbstractInputHandler3D *inputHandler /ScopesStripped=1/);
        void activeThemeChanged(QtStackedBar3DVis::QTheme3D *theme /ScopesStripped=1/);
        void selectionModeChanged(QtStackedBar3DVis::QAbstractGraph3D::SelectionFlags mode /ScopesStripped=1/);
        void shadowQualityChanged(QtStackedBar3DVis::QAbstractGraph3D::ShadowQuality quality /ScopesStripped=1/);

    protected:
        virtual bool event(QEvent *event);
        virtual void resizeEvent(QResizeEvent *event);
        virtual void exposeEvent(QExposeEvent *event);
        virtual void mouseDoubleClickEvent(QMouseEvent *event);
        virtual void touchEvent(QTouchEvent *event);
        virtual void mousePressEvent(QMouseEvent *event);
        virtual void mouseReleaseEvent(QMouseEvent *event);
        virtual void mouseMoveEvent(QMouseEvent *event);
        virtual void wheelEvent(QWheelEvent *event);

    public:
        enum ElementType
        {
            ElementNone,
            ElementSeries,
            ElementAxisXLabel,
            ElementAxisYLabel,
            ElementAxisZLabel,
            ElementCustomItem,
        };


        enum OptimizationHint
        {
            OptimizationDefault,
            OptimizationStatic,
        };

        typedef QFlags<QtStackedBar3DVis::QAbstractGraph3D::OptimizationHint> OptimizationHints;
        int addCustomItem(QtStackedBar3DVis::QCustomItem3D *item /Transfer/);
        void removeCustomItems();
        void removeCustomItem(QtStackedBar3DVis::QCustomItem3D *item);
        void removeCustomItemAt(const QVector3D &position);
        void releaseCustomItem(QtStackedBar3DVis::QCustomItem3D *item /TransferBack/);
        int selectedLabelIndex() const;
        QtStackedBar3DVis::QAbstractAxis3D *selectedAxis() const;
        int selectedCustomItemIndex() const;
        QtStackedBar3DVis::QCustomItem3D *selectedCustomItem() const;
        QImage renderToImage(int msaaSamples = 0, const QSize &imageSize = QSize());
        void setMeasureFps(bool enable);
        bool measureFps() const;
        qreal currentFps() const;
        void setOrthoProjection(bool enable);
        bool isOrthoProjection() const;
        QtStackedBar3DVis::QAbstractGraph3D::ElementType selectedElement() const;
        void setAspectRatio(qreal ratio);
        qreal aspectRatio() const;
        void setOptimizationHints(QtStackedBar3DVis::QAbstractGraph3D::OptimizationHints hints);
        QtStackedBar3DVis::QAbstractGraph3D::OptimizationHints optimizationHints() const;

    signals:
        void measureFpsChanged(bool enabled);
        void currentFpsChanged(qreal fps);
        void orthoProjectionChanged(bool enabled);
        void aspectRatioChanged(qreal ratio);
        void optimizationHintsChanged(QtStackedBar3DVis::QAbstractGraph3D::OptimizationHints hints /ScopesStripped=1/);

    public:
        QList<QtStackedBar3DVis::QCustomItem3D *> customItems() const;
        void setPolar(bool enable);
        bool isPolar() const;
        void setRadialLabelOffset(float offset);
        float radialLabelOffset() const;
        void setHorizontalAspectRatio(qreal ratio);
        qreal horizontalAspectRatio() const;
        void setReflection(bool enable);
        bool isReflection() const;
        void setReflectivity(qreal reflectivity);
        qreal reflectivity() const;
        void setLocale(const QLocale &locale);
        QLocale locale() const;
        QVector3D queriedGraphPosition() const;
        void setMargin(qreal margin);
        qreal margin() const;

    signals:
        void polarChanged(bool enabled);
        void radialLabelOffsetChanged(float offset);
        void horizontalAspectRatioChanged(qreal ratio);
        void reflectionChanged(bool enabled);
        void reflectivityChanged(qreal reflectivity);
        void localeChanged(const QLocale &locale);
        void queriedGraphPositionChanged(const QVector3D &data);
        void marginChanged(qreal margin);

    public:
        bool hasContext() const;
    };

    QFlags<QtStackedBar3DVis::QAbstractGraph3D::SelectionFlag> operator|(QtStackedBar3DVis::QAbstractGraph3D::SelectionFlag f1, QFlags<QtStackedBar3DVis::QAbstractGraph3D::SelectionFlag> f2);
    QFlags<QtStackedBar3DVis::QAbstractGraph3D::OptimizationHint> operator|(QtStackedBar3DVis::QAbstractGraph3D::OptimizationHint f1, QFlags<QtStackedBar3DVis::QAbstractGraph3D::OptimizationHint> f2);
};
