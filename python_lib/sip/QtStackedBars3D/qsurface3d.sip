// QSurface3D.sip generated by MetaSIP
//
// This file is part of the QtStackedBar3DVis Python extension module.
//
// Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtStackedBar3DVis.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtStackedBar3DVis
{
%TypeHeaderCode
#include <QSurface3D.h>
%End

    class QSurface3D : QtStackedBar3DVis::QAbstract3DGraph
    {
%TypeHeaderCode
#include <QSurface3D.h>
%End

    public:
        QSurface3D(const QSurfaceFormat *format = 0, QWindow *parent /TransferThis/ = 0);
        virtual ~QSurface3D();
        void addSeries(QtStackedBar3DVis::QSurfaceSeries3D *series /Transfer/);
        void removeSeries(QtStackedBar3DVis::QSurfaceSeries3D *series /TransferBack/);
        QList<QtStackedBar3DVis::QSurfaceSeries3D *> seriesList() const;
        void setAxisX(QtStackedBar3DVis::QValueAxis3D *axis /Transfer/);
        QtStackedBar3DVis::QValueAxis3D *axisX() const;
        void setAxisY(QtStackedBar3DVis::QValueAxis3D *axis /Transfer/);
        QtStackedBar3DVis::QValueAxis3D *axisY() const;
        void setAxisZ(QtStackedBar3DVis::QValueAxis3D *axis /Transfer/);
        QtStackedBar3DVis::QValueAxis3D *axisZ() const;
        void addAxis(QtStackedBar3DVis::QValueAxis3D *axis /Transfer/);
        void releaseAxis(QtStackedBar3DVis::QValueAxis3D *axis /TransferBack/);
        QList<QtStackedBar3DVis::QValueAxis3D *> axes() const;
        QtStackedBar3DVis::QSurfaceSeries3D *selectedSeries() const;

    signals:
        void axisXChanged(QtStackedBar3DVis::QValueAxis3D *axis /ScopesStripped=1/);
        void axisYChanged(QtStackedBar3DVis::QValueAxis3D *axis /ScopesStripped=1/);
        void axisZChanged(QtStackedBar3DVis::QValueAxis3D *axis /ScopesStripped=1/);
        void selectedSeriesChanged(QtStackedBar3DVis::QSurfaceSeries3D *series /ScopesStripped=1/);

    public:
%If (QtStackedBar3DVis_1_2_0 -)
        void setFlipHorizontalGrid(bool flip);
%End
%If (QtStackedBar3DVis_1_2_0 -)
        bool flipHorizontalGrid() const;
%End

    signals:
%If (QtStackedBar3DVis_1_2_0 -)
        void flipHorizontalGridChanged(bool flip);
%End
    };
};
