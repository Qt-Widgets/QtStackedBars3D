// QTheme3D.sip generated by MetaSIP
//
// This file is part of the QtStackedBar3DVis Python extension module.
//
// Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtStackedBar3DVis.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtStackedBar3DVis
{
%TypeHeaderCode
#include <QTheme3D.h>
%End

    class QTheme3D : QObject
    {
%TypeHeaderCode
#include <QTheme3D.h>
%End

%ConvertToSubClassCode
        static struct class_graph {
            const char *name;
            sipTypeDef **type;
            int yes, no;
        } graph[] = {
            {sipName_QtStackedBar3DVis__QAbstractInputHandler3D, &sipType_QtStackedBar3DVis_QAbstractInputHandler3D, 10, 1},
        #if QtStackedBar3DVis_VERSION >= 0x010100
            {sipName_QtStackedBar3DVis__QAxisValueFormatter3D, &sipType_QtStackedBar3DVis_QAxisValueFormatter3D, 12, 2},
        #else
            {0, 0, 12, 2},
        #endif
            {sipName_QtStackedBar3DVis__QAbstractDataProxy3D, &sipType_QtStackedBar3DVis_QAbstractDataProxy3D, 13, 3},
            /*{sipName_QtStackedBar3DVis__QAbstractAxis3D, &sipType_QtStackedBar3Dis_QAbstractAxis3D, 20, 4},*/
        #if QtStackedBar3DVis_VERSION >= 0x010100
            {sipName_QtStackedBar3DVis__QCustomItem3D, &sipType_QtStackedBar3DVis_QCustomItem3D, 22, 5},
        #else
            {0, 0, 22, 5},
        #endif
            {sipName_QtStackedBar3DVis__QAbstractSeries3D, &sipType_QtStackedBar3DVis_QAbstractSeries3D, 24, 6},
            {sipName_QtStackedBar3DVis__QTheme3D, &sipType_QtStackedBar3DVis_QTheme3D, -1, 7},
            {sipName_QtStackedBar3DVis__QAbstractGraph3D, &sipType_QtStackedBar3DVis_QAbstractGraph3D, 27, 8},
            {sipName_QtStackedBar3DVis__QScene3D, &sipType_QtStackedBar3DVis_QScene3D, -1, 9},
            {sipName_QtStackedBar3DVis__QObject3D, &sipType_QtStackedBar3DVis_QObject3D, 30, -1},
            {sipName_QtStackedBar3DVis__QInputHandler3D, &sipType_QtStackedBar3DVis_QInputHandler3D, 11, -1},
            {sipName_QtStackedBar3DVis__QTouchInputHandler3D, &sipType_QtStackedBar3DVis_QTouchInputHandler3D, -1, -1},
        /*#if QtStackedBar3DVis_VERSION >= 0x010100
            {sipName_QtStackedBar3DVis__QLogValue3DAxisFormatter, &sipType_QtStackedBar3DVis_QLogValue3DAxisFormatter, -1, -1},
        #else
            {0, 0, -1, -1},
        #endif*/
            {sipName_QtStackedBar3DVis__QSurfaceDataProxy3D, &sipType_QtStackedBar3DVis_QSurfaceDataProxy3D, 16, 14},
            /*{sipName_QtStackedBar3DVis__QScatterDataProxy3D, &sipType_QtStackedBar3DVis_QScatterDataProxy3D, 18, 15},*/
            {sipName_QtStackedBar3DVis__QBarDataProxy3D, &sipType_QtStackedBar3DVis_QBarDataProxy3D, 19, -1},
            {sipName_QtStackedBar3DVis__QStackedBarDataProxy3D, &sipType_QtStackedBar3DVis_QStackedBarDataProxy3D, -1, -1},
            /*{sipName_QtStackedBar3DVis__QItemModelSurfaceDataProxy, &sipType_QtStackedBar3DVis_QItemModelSurfaceDataProxy, -1, 17},
            {sipName_QtStackedBar3DVis__QHeightMapSurfaceDataProxy, &sipType_QtStackedBar3DVis_QHeightMapSurfaceDataProxy, -1, -1},
            {sipName_QtStackedBar3DVis__QItemModelScatterDataProxy, &sipType_QtStackedBar3DVis_QItemModelScatterDataProxy, -1, -1},
            {sipName_QtStackedBar3DVis__QItemModelBarDataProxy, &sipType_QtStackedBar3DVis_QItemModelBarDataProxy, -1, -1},*/
            {sipName_QtStackedBar3DVis__QValueAxis3D, &sipType_QtStackedBar3DVis_QValueAxis3D, -1, 21},
            {sipName_QtStackedBar3DVis__QCategoryAxis3D, &sipType_QtStackedBar3DVis_QCategoryAxis3D, -1, -1},
        #if QtStackedBar3DVis_VERSION >= 0x010100
            {sipName_QtStackedBar3DVis__QCustomLabel3D, &sipType_QtStackedBar3DVis_QCustomLabel3D, -1, 23},
        #else
            {0, 0, -1, 23},
        #endif
        /*#if QtStackedBar3DVis_VERSION >= 0x010200
            {sipName_QtStackedBar3DVis__QCustom3DVolume, &sipType_QtStackedBar3DVis_QCustom3DVolume, -1, -1},
        #else
            {0, 0, -1, -1},
        #endif*/
            /*{sipName_QtStackedBar3DVis__QScatterSeries3D, &sipType_QtStackedBar3DVis_QScatterSeries3D, -1, 25},*/
            {sipName_QtStackedBar3DVis__QSurfaceSeries3D, &sipType_QtStackedBar3DVis_QSurfaceSeries3D, -1, 26},
            {sipName_QtStackedBar3DVis__QBarSeries3D, &sipType_QtStackedBar3DVis_QBarSeries3D, -1, -1},
            /*{sipName_QtStackedBar3DVis__Q3DSurface, &sipType_QtStackedBar3DVis_Q3DSurface, -1, 28},
            {sipName_QtStackedBar3DVis__Q3DScatter, &sipType_QtStackedBar3DVis_Q3DScatter, -1, 29},*/
            {sipName_QtStackedBar3DVis__QBars3D, &sipType_QtStackedBar3DVis_QBars3D, -1, -1},
            {sipName_QtStackedBar3DVis__QStackedBars3D, &sipType_QtStackedBar3DVis_QStackedBars3D, -1, -1},
            {sipName_QtStackedBar3DVis__QCamera3D, &sipType_QtStackedBar3DVis_QCamera3D, -1, 31},
            {sipName_QtStackedBar3DVis__QLight3D, &sipType_QtStackedBar3DVis_QLight3D, -1, -1},
            {sipName_QtStackedBar3DVis__QStackedBarSeries3D, &sipType_QtStackedBar3DVis_QStackedBarSeries3D, -1, -1},

        };
        
        int i = 0;
        
        sipType = NULL;
        
        do
        {
            struct class_graph *cg = &graph[i];
        
            if (cg->name != NULL && sipCpp->inherits(cg->name))
            {
                sipType = *cg->type;
                i = cg->yes;
            }
            else
                i = cg->no;
        }
        while (i >= 0);
%End

    public:
        enum ColorStyle
        {
            ColorStyleUniform,
            ColorStyleObjectGradient,
            ColorStyleRangeGradient,
        };

        enum Theme
        {
            ThemeQt,
            ThemePrimaryColors,
            ThemeDigia,
            ThemeStoneMoss,
            ThemeArmyBlue,
            ThemeRetro,
            ThemeEbony,
            ThemeIsabelle,
            ThemeUserDefined,
        };

        explicit QTheme3D(QObject *parent /TransferThis/ = 0);
        QTheme3D(QtStackedBar3DVis::QTheme3D::Theme themeType, QObject *parent /TransferThis/ = 0);
        virtual ~QTheme3D();
        void setType(QtStackedBar3DVis::QTheme3D::Theme themeType);
        QtStackedBar3DVis::QTheme3D::Theme type() const;
        void setBaseColors(const QList<QColor> &colors);
        QList<QColor> baseColors() const;
        void setBackgroundColor(const QColor &color);
        QColor backgroundColor() const;
        void setWindowColor(const QColor &color);
        QColor windowColor() const;
        void setLabelTextColor(const QColor &color);
        QColor labelTextColor() const;
        void setLabelBackgroundColor(const QColor &color);
        QColor labelBackgroundColor() const;
        void setGridLineColor(const QColor &color);
        QColor gridLineColor() const;
        void setSingleHighlightColor(const QColor &color);
        QColor singleHighlightColor() const;
        void setMultiHighlightColor(const QColor &color);
        QColor multiHighlightColor() const;
        void setLightColor(const QColor &color);
        QColor lightColor() const;
        void setBaseGradients(const QList<QLinearGradient> &gradients);
        QList<QLinearGradient> baseGradients() const;
        void setSingleHighlightGradient(const QLinearGradient &gradient);
        QLinearGradient singleHighlightGradient() const;
        void setMultiHighlightGradient(const QLinearGradient &gradient);
        QLinearGradient multiHighlightGradient() const;
        void setLightStrength(float strength);
        float lightStrength() const;
        void setAmbientLightStrength(float strength);
        float ambientLightStrength() const;
        void setHighlightLightStrength(float strength);
        float highlightLightStrength() const;
        void setLabelBorderEnabled(bool enabled);
        bool isLabelBorderEnabled() const;
        void setFont(const QFont &font);
        QFont font() const;
        void setBackgroundEnabled(bool enabled);
        bool isBackgroundEnabled() const;
        void setGridEnabled(bool enabled);
        bool isGridEnabled() const;
        void setLabelBackgroundEnabled(bool enabled);
        bool isLabelBackgroundEnabled() const;
        void setColorStyle(QtStackedBar3DVis::QTheme3D::ColorStyle style);
        QtStackedBar3DVis::QTheme3D::ColorStyle colorStyle() const;

    signals:
        void typeChanged(QtStackedBar3DVis::QTheme3D::Theme themeType /ScopesStripped=1/);
        void baseColorsChanged(const QList<QColor> &colors);
        void backgroundColorChanged(const QColor &color);
        void windowColorChanged(const QColor &color);
        void labelTextColorChanged(const QColor &color);
        void labelBackgroundColorChanged(const QColor &color);
        void gridLineColorChanged(const QColor &color);
        void singleHighlightColorChanged(const QColor &color);
        void multiHighlightColorChanged(const QColor &color);
        void lightColorChanged(const QColor &color);
        void baseGradientsChanged(const QList<QLinearGradient> &gradients);
        void singleHighlightGradientChanged(const QLinearGradient &gradient);
        void multiHighlightGradientChanged(const QLinearGradient &gradient);
        void lightStrengthChanged(float strength);
        void ambientLightStrengthChanged(float strength);
        void highlightLightStrengthChanged(float strength);
        void labelBorderEnabledChanged(bool enabled);
        void fontChanged(const QFont &font);
        void backgroundEnabledChanged(bool enabled);
        void gridEnabledChanged(bool enabled);
        void labelBackgroundEnabledChanged(bool enabled);
        void colorStyleChanged(QtStackedBar3DVis::QTheme3D::ColorStyle style /ScopesStripped=1/);
    };
};
