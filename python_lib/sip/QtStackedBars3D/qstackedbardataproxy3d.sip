// QBarDataProxy3D.sip generated by MetaSIP
//
// This file is part of the QtStackedBar3DVis Python extension module.
//
// Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtStackedBar3DVis.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtStackedBar3DVis
{
%TypeHeaderCode
#include <QStackedBarDataProxy3D.h>
%End

    typedef QVector<QtStackedBar3DVis::QStackedBarDataItem3D> QStackedBarDataRow3D;
    typedef QList<QVector<QtStackedBar3DVis::QStackedBarDataItem3D> *> QStackedBarDataArray3D;

    class QStackedBarDataProxy3D : QtStackedBar3DVis::QAbstractDataProxy3D
    {
%TypeHeaderCode
#include <QStackedBarDataProxy3D.h>
%End

    public:
        explicit QStackedBarDataProxy3D(QObject *parent /TransferThis/ = 0);
        virtual ~QStackedBarDataProxy3D();
        int rowCount() const;
        QStringList rowLabels() const;
        void setRowLabels(const QStringList &labels);
        QStringList columnLabels() const;
        void setColumnLabels(const QStringList &labels);
        const QtStackedBar3DVis::QStackedBarDataArray3D *array() const;
        const QtStackedBar3DVis::QStackedBarDataRow3D *rowAt(int rowIndex) const;
        const QtStackedBar3DVis::QStackedBarDataItem3D *itemAt(int rowIndex, int columnIndex) const;
        const QtStackedBar3DVis::QStackedBarDataItem3D *itemAt(const QPoint &position) const;
        void resetArray();
        void resetArray(QtStackedBar3DVis::QStackedBarDataArray3D *newArray /Transfer/);
        void resetArray(QtStackedBar3DVis::QStackedBarDataArray3D *newArray /Transfer/, const QStringList &rowLabels, const QStringList &columnLabels);
        void setRow(int rowIndex, QtStackedBar3DVis::QStackedBarDataRow3D *row /Transfer/);
        void setRow(int rowIndex, QtStackedBar3DVis::QStackedBarDataRow3D *row /Transfer/, const QString &label);
        void setRows(int rowIndex, const QtStackedBar3DVis::QStackedBarDataArray3D &rows);
        void setRows(int rowIndex, const QtStackedBar3DVis::QStackedBarDataArray3D &rows, const QStringList &labels);
        void setItem(int rowIndex, int columnIndex, const QtStackedBar3DVis::QStackedBarDataItem3D &item);
        void setItem(const QPoint &position, const QtStackedBar3DVis::QStackedBarDataItem3D &item);
        int addRow(QtStackedBar3DVis::QStackedBarDataRow3D *row /Transfer/);
        int addRow(QtStackedBar3DVis::QStackedBarDataRow3D *row /Transfer/, const QString &label);
        int addRow(const QList<qreal> &values, unsigned int stride);
        int addRow(const QList<qreal>& values, unsigned int stride, const QString& label);
        int addRows(const QtStackedBar3DVis::QStackedBarDataArray3D &rows);
        int addRows(const QtStackedBar3DVis::QStackedBarDataArray3D &rows, const QStringList &labels);
        void insertRow(int rowIndex, QtStackedBar3DVis::QStackedBarDataRow3D *row /Transfer/);
        void insertRow(int rowIndex, QtStackedBar3DVis::QStackedBarDataRow3D *row /Transfer/, const QString &label);
        void insertRows(int rowIndex, const QtStackedBar3DVis::QStackedBarDataArray3D &rows);
        void insertRows(int rowIndex, const QtStackedBar3DVis::QStackedBarDataArray3D &rows, const QStringList &labels);
        void removeRows(int rowIndex, int removeCount, bool removeLabels = true);
        QtStackedBar3DVis::QStackedBarSeries3D *series() const;

    signals:
        void arrayReset();
        void rowsAdded(int startIndex, int count);
        void rowsChanged(int startIndex, int count);
        void rowsRemoved(int startIndex, int count);
        void rowsInserted(int startIndex, int count);
        void itemChanged(int rowIndex, int columnIndex);
        void rowCountChanged(int count);
        void rowLabelsChanged();
        void columnLabelsChanged();
        void seriesChanged(QtStackedBar3DVis::QStackedBarSeries3D *series /ScopesStripped=1/);
    };
};
