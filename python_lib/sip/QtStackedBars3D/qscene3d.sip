// QScene3D.sip generated by MetaSIP
//
// This file is part of the QtStackedBar3DVis Python extension module.
//
// Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtStackedBar3DVis.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtStackedBar3DVis
{
%TypeHeaderCode
#include <QScene3D.h>
%End

    class QScene3D : QObject
    {
%TypeHeaderCode
#include <QScene3D.h>
%End

    public:
        //explicit QScene3D(QObject *parent /TransferThis/ = 0);
        QScene3D(QObject *parent /TransferThis/ = 0);
        virtual ~QScene3D();
        QRect viewport() const;
        QRect primarySubViewport() const;
        void setPrimarySubViewport(const QRect &primarySubViewport);
        bool isPointInPrimarySubView(const QPoint &point);
        QRect secondarySubViewport() const;
        void setSecondarySubViewport(const QRect &secondarySubViewport);
        bool isPointInSecondarySubView(const QPoint &point);
        void setSelectionQueryPosition(const QPoint &point);
        QPoint selectionQueryPosition() const;
        static QPoint invalidSelectionPoint();
        void setSlicingActive(bool isSlicing);
        bool isSlicingActive() const;
        void setSecondarySubviewOnTop(bool isSecondaryOnTop);
        bool isSecondarySubviewOnTop() const;
        QtStackedBar3DVis::QCamera3D *activeCamera() const;
        void setActiveCamera(QtStackedBar3DVis::QCamera3D *camera /Transfer/);
        QtStackedBar3DVis::QLight3D *activeLight() const;
        void setActiveLight(QtStackedBar3DVis::QLight3D *light /Transfer/);
        float devicePixelRatio() const;
        void setDevicePixelRatio(float pixelRatio);

    signals:
        void viewportChanged(const QRect &viewport);
        void primarySubViewportChanged(const QRect &subViewport);
        void secondarySubViewportChanged(const QRect &subViewport);
        void secondarySubviewOnTopChanged(bool isSecondaryOnTop);
        void slicingActiveChanged(bool isSlicingActive);
        void activeCameraChanged(QtStackedBar3DVis::QCamera3D *camera /ScopesStripped=1/);
        void activeLightChanged(QtStackedBar3DVis::QLight3D *light /ScopesStripped=1/);
        void devicePixelRatioChanged(float pixelRatio);
        void selectionQueryPositionChanged(const QPoint &position);

    public:
        void setGraphPositionQuery(const QPoint &point);
        QPoint graphPositionQuery() const;

    signals:
        void graphPositionQueryChanged(const QPoint &position);
    };
};
