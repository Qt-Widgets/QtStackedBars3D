// QAxisValueFormatter3D.sip generated by MetaSIP
//
// This file is part of the QtStackedBar3DVis Python extension module.
//
// Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtStackedBar3DVis.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtStackedBar3DVis
{
%TypeHeaderCode
#include <QAxisValueFormatter3D.h>
%End

    class QAxisValueFormatter3D : QObject
    {
%TypeHeaderCode
#include <QAxisValueFormatter3D.h>
%End

    public:
        explicit QAxisValueFormatter3D(QObject *parent /TransferThis/ = 0);
        virtual ~QAxisValueFormatter3D();

    protected:
        void setAllowNegatives(bool allow);
        bool allowNegatives() const;
        void setAllowZero(bool allow);
        bool allowZero() const;
        virtual QtStackedBar3DVis::QAxisValueFormatter3D *createNewInstance() const /Factory/;
        virtual void recalculate();
        virtual QString stringForValue(qreal value, const QString &format) const;
        virtual float positionAt(float value) const;
        virtual float valueAt(float position) const;
        virtual void populateCopy(QtStackedBar3DVis::QAxisValueFormatter3D &copy) const;
        void markDirty(bool labelsChange = false);
        QtStackedBar3DVis::QValueAxis3D *axis() const;
        QVector<float> &gridPositions() const;
        QVector<float> &subGridPositions() const;
        QVector<float> &labelPositions() const;
        QStringList &labelStrings() const;
        void setLocale(const QLocale &locale);
        QLocale locale() const;
    };
};

