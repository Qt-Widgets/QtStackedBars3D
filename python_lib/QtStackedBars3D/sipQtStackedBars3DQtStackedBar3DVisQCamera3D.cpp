/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.12
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQtStackedBars3D.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtStackedBars3D.h"

#line 26 "sip/QtStackedBars3D/qbars3d.sip"
#include <QBars3D.h>
#line 26 "sip/QtStackedBars3D/qcamera3d.sip"
#include <QCamera3D.h>
#line 32 "sip/QtStackedBars3D/qcamera3d.sip"
#include <QCamera3D.h>
#line 33 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"

#line 28 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qobject.sip"
#include <qobject.h>
#line 37 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 30 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtGui/qvector3d.sip"
#include <qvector3d.h>
#line 40 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 26 "sip/QtStackedBars3D/qbars3d.sip"
#include <QBars3D.h>
#line 26 "sip/QtStackedBars3D/qcamera3d.sip"
#include <QCamera3D.h>
#line 26 "sip/QtStackedBars3D/qinputhandler3d.sip"
#include <QInputHandler3D.h>
#line 26 "sip/QtStackedBars3D/qlight3d.sip"
#include <QLight3D.h>
#line 26 "sip/QtStackedBars3D/qobject3d.sip"
#include <QObject3D.h>
#line 32 "sip/QtStackedBars3D/qobject3d.sip"
#include <QObject3D.h>
#line 53 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 26 "sip/QtStackedBars3D/qbars3d.sip"
#include <QBars3D.h>
#line 26 "sip/QtStackedBars3D/qcamera3d.sip"
#include <QCamera3D.h>
#line 26 "sip/QtStackedBars3D/qinputhandler3d.sip"
#include <QInputHandler3D.h>
#line 26 "sip/QtStackedBars3D/qlight3d.sip"
#include <QLight3D.h>
#line 26 "sip/QtStackedBars3D/qobject3d.sip"
#include <QObject3D.h>
#line 26 "sip/QtStackedBars3D/qscene3d.sip"
#include <QScene3D.h>
#line 32 "sip/QtStackedBars3D/qscene3d.sip"
#include <QScene3D.h>
#line 68 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 71 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 247 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 77 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 235 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 80 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 27 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 83 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qvariant.sip"
#include <qvariant.h>
#line 86 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 38 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 89 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 30 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 92 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 149 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 95 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 98 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qthread.sip"
#include <qthread.h>
#line 101 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 104 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qregexp.sip"
#include <qregexp.h>
#line 107 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 110 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 113 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQCamera3D.cpp"


class sipQtStackedBar3DVis_QCamera3D : public  ::QtStackedBar3DVis::QCamera3D
{
public:
    sipQtStackedBar3DVis_QCamera3D( ::QObject*);
    virtual ~sipQtStackedBar3DVis_QCamera3D();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&);
    void connectNotify(const  ::QMetaMethod&);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
    void copyValuesFrom(const  ::QtStackedBar3DVis::QObject3D&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQtStackedBar3DVis_QCamera3D(const sipQtStackedBar3DVis_QCamera3D &);
    sipQtStackedBar3DVis_QCamera3D &operator = (const sipQtStackedBar3DVis_QCamera3D &);

    char sipPyMethods[8];
};

sipQtStackedBar3DVis_QCamera3D::sipQtStackedBar3DVis_QCamera3D( ::QObject*a0):  ::QtStackedBar3DVis::QCamera3D(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQtStackedBar3DVis_QCamera3D::~sipQtStackedBar3DVis_QCamera3D()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQtStackedBar3DVis_QCamera3D::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtStackedBars3D_qt_metaobject(sipPySelf,sipType_QtStackedBar3DVis_QCamera3D);

    return  ::QtStackedBar3DVis::QCamera3D::metaObject();
}

int sipQtStackedBar3DVis_QCamera3D::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QtStackedBar3DVis::QCamera3D::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtStackedBars3D_qt_metacall(sipPySelf,sipType_QtStackedBar3DVis_QCamera3D,_c,_id,_a);

    return _id;
}

void *sipQtStackedBar3DVis_QCamera3D::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtStackedBars3D_qt_metacast(sipPySelf, sipType_QtStackedBar3DVis_QCamera3D, _clname, &sipCpp) ? sipCpp :  ::QtStackedBar3DVis::QCamera3D::qt_metacast(_clname));
}

void sipQtStackedBar3DVis_QCamera3D::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QtStackedBar3DVis::QCamera3D::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtStackedBars3D_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtStackedBars3D_20(sipGILState, sipImportedVirtErrorHandlers_QtStackedBars3D_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQtStackedBar3DVis_QCamera3D::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QtStackedBar3DVis::QCamera3D::connectNotify(a0);
        return;
    }

    extern void sipVH_QtStackedBars3D_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtStackedBars3D_20(sipGILState, sipImportedVirtErrorHandlers_QtStackedBars3D_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQtStackedBar3DVis_QCamera3D::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QtStackedBar3DVis::QCamera3D::customEvent(a0);
        return;
    }

    extern void sipVH_QtStackedBars3D_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtStackedBars3D_19(sipGILState, sipImportedVirtErrorHandlers_QtStackedBars3D_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQtStackedBar3DVis_QCamera3D::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QtStackedBar3DVis::QCamera3D::childEvent(a0);
        return;
    }

    extern void sipVH_QtStackedBars3D_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtStackedBars3D_18(sipGILState, sipImportedVirtErrorHandlers_QtStackedBars3D_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQtStackedBar3DVis_QCamera3D::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QtStackedBar3DVis::QCamera3D::timerEvent(a0);
        return;
    }

    extern void sipVH_QtStackedBars3D_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtStackedBars3D_17(sipGILState, sipImportedVirtErrorHandlers_QtStackedBars3D_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQtStackedBar3DVis_QCamera3D::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QtStackedBar3DVis::QCamera3D::eventFilter(a0,a1);

    extern bool sipVH_QtStackedBars3D_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtStackedBars3D_16(sipGILState, sipImportedVirtErrorHandlers_QtStackedBars3D_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQtStackedBar3DVis_QCamera3D::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QtStackedBar3DVis::QCamera3D::event(a0);

    extern bool sipVH_QtStackedBars3D_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtStackedBars3D_15(sipGILState, sipImportedVirtErrorHandlers_QtStackedBars3D_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQtStackedBar3DVis_QCamera3D::copyValuesFrom(const  ::QtStackedBar3DVis::QObject3D& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_copyValuesFrom);

    if (!sipMeth)
    {
         ::QtStackedBar3DVis::QCamera3D::copyValuesFrom(a0);
        return;
    }

    extern void sipVH_QtStackedBars3D_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QtStackedBar3DVis::QObject3D&);

    sipVH_QtStackedBars3D_22(sipGILState, sipImportedVirtErrorHandlers_QtStackedBars3D_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_xRotation, "xRotation(self) -> float");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_xRotation(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_xRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->xRotation();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_xRotation, doc_QtStackedBar3DVis_QCamera3D_xRotation);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_setXRotation, "setXRotation(self, float)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_setXRotation(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_setXRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
         ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp, &a0))
        {
            sipCpp->setXRotation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_setXRotation, doc_QtStackedBar3DVis_QCamera3D_setXRotation);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_yRotation, "yRotation(self) -> float");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_yRotation(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_yRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->yRotation();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_yRotation, doc_QtStackedBar3DVis_QCamera3D_yRotation);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_setYRotation, "setYRotation(self, float)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_setYRotation(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_setYRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
         ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp, &a0))
        {
            sipCpp->setYRotation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_setYRotation, doc_QtStackedBar3DVis_QCamera3D_setYRotation);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_wrapXRotation, "wrapXRotation(self) -> bool");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_wrapXRotation(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_wrapXRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->wrapXRotation();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_wrapXRotation, doc_QtStackedBar3DVis_QCamera3D_wrapXRotation);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_setWrapXRotation, "setWrapXRotation(self, bool)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_setWrapXRotation(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_setWrapXRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp, &a0))
        {
            sipCpp->setWrapXRotation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_setWrapXRotation, doc_QtStackedBar3DVis_QCamera3D_setWrapXRotation);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_wrapYRotation, "wrapYRotation(self) -> bool");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_wrapYRotation(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_wrapYRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->wrapYRotation();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_wrapYRotation, doc_QtStackedBar3DVis_QCamera3D_wrapYRotation);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_setWrapYRotation, "setWrapYRotation(self, bool)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_setWrapYRotation(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_setWrapYRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp, &a0))
        {
            sipCpp->setWrapYRotation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_setWrapYRotation, doc_QtStackedBar3DVis_QCamera3D_setWrapYRotation);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_copyValuesFrom, "copyValuesFrom(self, QtStackedBar3DVis.QObject3D)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_copyValuesFrom(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_copyValuesFrom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QtStackedBar3DVis::QObject3D* a0;
         ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp, sipType_QtStackedBar3DVis_QObject3D, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QtStackedBar3DVis::QCamera3D::copyValuesFrom(*a0) : sipCpp->copyValuesFrom(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_copyValuesFrom, doc_QtStackedBar3DVis_QCamera3D_copyValuesFrom);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_cameraPreset, "cameraPreset(self) -> QtStackedBar3DVis.QCamera3D.CameraPreset");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_cameraPreset(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_cameraPreset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp))
        {
             ::QtStackedBar3DVis::QCamera3D::CameraPreset sipRes;

            sipRes = sipCpp->cameraPreset();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QtStackedBar3DVis_QCamera3D_CameraPreset);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_cameraPreset, doc_QtStackedBar3DVis_QCamera3D_cameraPreset);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_setCameraPreset, "setCameraPreset(self, QtStackedBar3DVis.QCamera3D.CameraPreset)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_setCameraPreset(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_setCameraPreset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QtStackedBar3DVis::QCamera3D::CameraPreset a0;
         ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp, sipType_QtStackedBar3DVis_QCamera3D_CameraPreset, &a0))
        {
            sipCpp->setCameraPreset(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_setCameraPreset, doc_QtStackedBar3DVis_QCamera3D_setCameraPreset);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_setCameraPosition, "setCameraPosition(self, float, float, zoom: float = 100)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_setCameraPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_setCameraPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        float a1;
        float a2 = 100;
         ::QtStackedBar3DVis::QCamera3D *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_zoom,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bff|f", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->setCameraPosition(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_setCameraPosition, doc_QtStackedBar3DVis_QCamera3D_setCameraPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_zoomLevel, "zoomLevel(self) -> float");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_zoomLevel(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_zoomLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->zoomLevel();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_zoomLevel, doc_QtStackedBar3DVis_QCamera3D_zoomLevel);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_setZoomLevel, "setZoomLevel(self, float)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_setZoomLevel(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_setZoomLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
         ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp, &a0))
        {
            sipCpp->setZoomLevel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_setZoomLevel, doc_QtStackedBar3DVis_QCamera3D_setZoomLevel);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_minZoomLevel, "minZoomLevel(self) -> float");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_minZoomLevel(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_minZoomLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->minZoomLevel();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_minZoomLevel, doc_QtStackedBar3DVis_QCamera3D_minZoomLevel);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_setMinZoomLevel, "setMinZoomLevel(self, float)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_setMinZoomLevel(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_setMinZoomLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
         ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp, &a0))
        {
            sipCpp->setMinZoomLevel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_setMinZoomLevel, doc_QtStackedBar3DVis_QCamera3D_setMinZoomLevel);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_maxZoomLevel, "maxZoomLevel(self) -> float");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_maxZoomLevel(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_maxZoomLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->maxZoomLevel();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_maxZoomLevel, doc_QtStackedBar3DVis_QCamera3D_maxZoomLevel);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_setMaxZoomLevel, "setMaxZoomLevel(self, float)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_setMaxZoomLevel(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_setMaxZoomLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
         ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp, &a0))
        {
            sipCpp->setMaxZoomLevel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_setMaxZoomLevel, doc_QtStackedBar3DVis_QCamera3D_setMaxZoomLevel);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_target, "target(self) -> QVector3D");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_target(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_target(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D(sipCpp->target());

            return sipConvertFromNewType(sipRes,sipType_QVector3D,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_target, doc_QtStackedBar3DVis_QCamera3D_target);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D_setTarget, "setTarget(self, QVector3D)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QCamera3D_setTarget(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QCamera3D_setTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVector3D* a0;
         ::QtStackedBar3DVis::QCamera3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QtStackedBar3DVis_QCamera3D, &sipCpp, sipType_QVector3D, &a0))
        {
            sipCpp->setTarget(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera3D, sipName_setTarget, doc_QtStackedBar3DVis_QCamera3D_setTarget);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QtStackedBar3DVis_QCamera3D(void *, const sipTypeDef *);}
static void *cast_QtStackedBar3DVis_QCamera3D(void *sipCppV, const sipTypeDef *targetType)
{
     ::QtStackedBar3DVis::QCamera3D *sipCpp = reinterpret_cast< ::QtStackedBar3DVis::QCamera3D *>(sipCppV);

    if (targetType == sipType_QtStackedBar3DVis_QObject3D)
        return static_cast< ::QtStackedBar3DVis::QObject3D *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QtStackedBar3DVis_QCamera3D(void *, int);}
static void release_QtStackedBar3DVis_QCamera3D(void *sipCppV, int)
{
     ::QtStackedBar3DVis::QCamera3D *sipCpp = reinterpret_cast< ::QtStackedBar3DVis::QCamera3D *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QtStackedBar3DVis_QCamera3D(sipSimpleWrapper *);}
static void dealloc_QtStackedBar3DVis_QCamera3D(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQtStackedBar3DVis_QCamera3D *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QtStackedBar3DVis_QCamera3D(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QtStackedBar3DVis_QCamera3D(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QtStackedBar3DVis_QCamera3D(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQtStackedBar3DVis_QCamera3D *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQtStackedBar3DVis_QCamera3D(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QtStackedBar3DVis_QCamera3D[] = {{41, 255, 1}};


static PyMethodDef methods_QtStackedBar3DVis_QCamera3D[] = {
    {SIP_MLNAME_CAST(sipName_cameraPreset), meth_QtStackedBar3DVis_QCamera3D_cameraPreset, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_cameraPreset)},
    {SIP_MLNAME_CAST(sipName_copyValuesFrom), meth_QtStackedBar3DVis_QCamera3D_copyValuesFrom, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_copyValuesFrom)},
    {SIP_MLNAME_CAST(sipName_maxZoomLevel), meth_QtStackedBar3DVis_QCamera3D_maxZoomLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_maxZoomLevel)},
    {SIP_MLNAME_CAST(sipName_minZoomLevel), meth_QtStackedBar3DVis_QCamera3D_minZoomLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_minZoomLevel)},
    {SIP_MLNAME_CAST(sipName_setCameraPosition), (PyCFunction)meth_QtStackedBar3DVis_QCamera3D_setCameraPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_setCameraPosition)},
    {SIP_MLNAME_CAST(sipName_setCameraPreset), meth_QtStackedBar3DVis_QCamera3D_setCameraPreset, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_setCameraPreset)},
    {SIP_MLNAME_CAST(sipName_setMaxZoomLevel), meth_QtStackedBar3DVis_QCamera3D_setMaxZoomLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_setMaxZoomLevel)},
    {SIP_MLNAME_CAST(sipName_setMinZoomLevel), meth_QtStackedBar3DVis_QCamera3D_setMinZoomLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_setMinZoomLevel)},
    {SIP_MLNAME_CAST(sipName_setTarget), meth_QtStackedBar3DVis_QCamera3D_setTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_setTarget)},
    {SIP_MLNAME_CAST(sipName_setWrapXRotation), meth_QtStackedBar3DVis_QCamera3D_setWrapXRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_setWrapXRotation)},
    {SIP_MLNAME_CAST(sipName_setWrapYRotation), meth_QtStackedBar3DVis_QCamera3D_setWrapYRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_setWrapYRotation)},
    {SIP_MLNAME_CAST(sipName_setXRotation), meth_QtStackedBar3DVis_QCamera3D_setXRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_setXRotation)},
    {SIP_MLNAME_CAST(sipName_setYRotation), meth_QtStackedBar3DVis_QCamera3D_setYRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_setYRotation)},
    {SIP_MLNAME_CAST(sipName_setZoomLevel), meth_QtStackedBar3DVis_QCamera3D_setZoomLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_setZoomLevel)},
    {SIP_MLNAME_CAST(sipName_target), meth_QtStackedBar3DVis_QCamera3D_target, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_target)},
    {SIP_MLNAME_CAST(sipName_wrapXRotation), meth_QtStackedBar3DVis_QCamera3D_wrapXRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_wrapXRotation)},
    {SIP_MLNAME_CAST(sipName_wrapYRotation), meth_QtStackedBar3DVis_QCamera3D_wrapYRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_wrapYRotation)},
    {SIP_MLNAME_CAST(sipName_xRotation), meth_QtStackedBar3DVis_QCamera3D_xRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_xRotation)},
    {SIP_MLNAME_CAST(sipName_yRotation), meth_QtStackedBar3DVis_QCamera3D_yRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_yRotation)},
    {SIP_MLNAME_CAST(sipName_zoomLevel), meth_QtStackedBar3DVis_QCamera3D_zoomLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QCamera3D_zoomLevel)}
};

static sipEnumMemberDef enummembers_QtStackedBar3DVis_QCamera3D[] = {
    {sipName_CameraPresetBehind, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetBehind), 35},
    {sipName_CameraPresetBehindBelow, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetBehindBelow), 35},
    {sipName_CameraPresetBehindHigh, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetBehindHigh), 35},
    {sipName_CameraPresetBehindLow, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetBehindLow), 35},
    {sipName_CameraPresetDirectlyAbove, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetDirectlyAbove), 35},
    {sipName_CameraPresetDirectlyAboveCCW45, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetDirectlyAboveCCW45), 35},
    {sipName_CameraPresetDirectlyAboveCW45, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetDirectlyAboveCW45), 35},
    {sipName_CameraPresetDirectlyBelow, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetDirectlyBelow), 35},
    {sipName_CameraPresetFront, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetFront), 35},
    {sipName_CameraPresetFrontBelow, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetFrontBelow), 35},
    {sipName_CameraPresetFrontHigh, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetFrontHigh), 35},
    {sipName_CameraPresetFrontLow, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetFrontLow), 35},
    {sipName_CameraPresetIsometricLeft, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetIsometricLeft), 35},
    {sipName_CameraPresetIsometricLeftHigh, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetIsometricLeftHigh), 35},
    {sipName_CameraPresetIsometricRight, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetIsometricRight), 35},
    {sipName_CameraPresetIsometricRightHigh, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetIsometricRightHigh), 35},
    {sipName_CameraPresetLeft, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetLeft), 35},
    {sipName_CameraPresetLeftBelow, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetLeftBelow), 35},
    {sipName_CameraPresetLeftHigh, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetLeftHigh), 35},
    {sipName_CameraPresetLeftLow, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetLeftLow), 35},
    {sipName_CameraPresetNone, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetNone), 35},
    {sipName_CameraPresetRight, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetRight), 35},
    {sipName_CameraPresetRightBelow, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetRightBelow), 35},
    {sipName_CameraPresetRightHigh, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetRightHigh), 35},
    {sipName_CameraPresetRightLow, static_cast<int>( ::QtStackedBar3DVis::QCamera3D::CameraPresetRightLow), 35},
};

PyDoc_STRVAR(doc_QtStackedBar3DVis_QCamera3D, "\1QtStackedBar3DVis.QCamera3D(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QtStackedBar3DVis_QCamera3D[] = {
    {"targetChanged(QVector3D)", "\1targetChanged(self, QVector3D)", 0, 0},
    {"maxZoomLevelChanged(float)", "\1maxZoomLevelChanged(self, float)", 0, 0},
    {"minZoomLevelChanged(float)", "\1minZoomLevelChanged(self, float)", 0, 0},
    {"wrapYRotationChanged(bool)", "\1wrapYRotationChanged(self, bool)", 0, 0},
    {"wrapXRotationChanged(bool)", "\1wrapXRotationChanged(self, bool)", 0, 0},
    {"cameraPresetChanged(QCamera3D::CameraPreset)|(QtStackedBar3DVis::QCamera3D::CameraPreset)", "\1cameraPresetChanged(self, QtStackedBar3DVis.QCamera3D.CameraPreset)", 0, 0},
    {"zoomLevelChanged(float)", "\1zoomLevelChanged(self, float)", 0, 0},
    {"yRotationChanged(float)", "\1yRotationChanged(self, float)", 0, 0},
    {"xRotationChanged(float)", "\1xRotationChanged(self, float)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QtStackedBar3DVis_QCamera3D = {
    & ::QtStackedBar3DVis::QCamera3D::staticMetaObject,
    0,
    signals_QtStackedBar3DVis_QCamera3D,
    0
};


sipClassTypeDef sipTypeDef_QtStackedBars3D_QtStackedBar3DVis_QCamera3D = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QtStackedBar3DVis__QCamera3D,
        {0},
        &plugin_QtStackedBar3DVis_QCamera3D
    },
    {
        sipNameNr_QCamera3D,
        {11, 255, 0},
        20, methods_QtStackedBar3DVis_QCamera3D,
        25, enummembers_QtStackedBar3DVis_QCamera3D,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QtStackedBar3DVis_QCamera3D,
    -1,
    -1,
    supers_QtStackedBar3DVis_QCamera3D,
    0,
    init_type_QtStackedBar3DVis_QCamera3D,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QtStackedBar3DVis_QCamera3D,
    0,
    0,
    0,
    release_QtStackedBar3DVis_QCamera3D,
    cast_QtStackedBar3DVis_QCamera3D,
    0,
    0,
    0,
    0,
    0,
    0
};
