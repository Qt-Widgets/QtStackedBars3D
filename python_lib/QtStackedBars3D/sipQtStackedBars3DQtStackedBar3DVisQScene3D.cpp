/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.12
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQtStackedBars3D.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtStackedBars3D.h"

#line 26 "sip/QtStackedBars3D/qbars3d.sip"
#include <QBars3D.h>
#line 26 "sip/QtStackedBars3D/qcamera3d.sip"
#include <QCamera3D.h>
#line 26 "sip/QtStackedBars3D/qinputhandler3d.sip"
#include <QInputHandler3D.h>
#line 26 "sip/QtStackedBars3D/qlight3d.sip"
#include <QLight3D.h>
#line 26 "sip/QtStackedBars3D/qobject3d.sip"
#include <QObject3D.h>
#line 26 "sip/QtStackedBars3D/qscene3d.sip"
#include <QScene3D.h>
#line 32 "sip/QtStackedBars3D/qscene3d.sip"
#include <QScene3D.h>
#line 41 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"

#line 28 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qobject.sip"
#include <qobject.h>
#line 45 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qpoint.sip"
#include <qpoint.h>
#line 48 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 26 "sip/QtStackedBars3D/qbars3d.sip"
#include <QBars3D.h>
#line 26 "sip/QtStackedBars3D/qcamera3d.sip"
#include <QCamera3D.h>
#line 26 "sip/QtStackedBars3D/qinputhandler3d.sip"
#include <QInputHandler3D.h>
#line 26 "sip/QtStackedBars3D/qlight3d.sip"
#include <QLight3D.h>
#line 32 "sip/QtStackedBars3D/qlight3d.sip"
#include <QLight3D.h>
#line 59 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 26 "sip/QtStackedBars3D/qbars3d.sip"
#include <QBars3D.h>
#line 26 "sip/QtStackedBars3D/qcamera3d.sip"
#include <QCamera3D.h>
#line 32 "sip/QtStackedBars3D/qcamera3d.sip"
#include <QCamera3D.h>
#line 66 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qrect.sip"
#include <qrect.h>
#line 69 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 72 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 247 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 235 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 27 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 84 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qvariant.sip"
#include <qvariant.h>
#line 87 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 38 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 90 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 30 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 93 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 149 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 96 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qthread.sip"
#include <qthread.h>
#line 102 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qregexp.sip"
#include <qregexp.h>
#line 108 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 111 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"
#line 26 "/trunet/data/volume2/virtualenvs/zyklio_python_packages_dbg/share/sip/PyQt5/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 114 "/trunet/data/volume2/src/QtStackedBars3D/python_lib/QtStackedBars3D/sipQtStackedBars3DQtStackedBar3DVisQScene3D.cpp"


class sipQtStackedBar3DVis_QScene3D : public  ::QtStackedBar3DVis::QScene3D
{
public:
    sipQtStackedBar3DVis_QScene3D( ::QObject*);
    virtual ~sipQtStackedBar3DVis_QScene3D();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQtStackedBar3DVis_QScene3D(const sipQtStackedBar3DVis_QScene3D &);
    sipQtStackedBar3DVis_QScene3D &operator = (const sipQtStackedBar3DVis_QScene3D &);

    char sipPyMethods[7];
};

sipQtStackedBar3DVis_QScene3D::sipQtStackedBar3DVis_QScene3D( ::QObject*a0):  ::QtStackedBar3DVis::QScene3D(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQtStackedBar3DVis_QScene3D::~sipQtStackedBar3DVis_QScene3D()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQtStackedBar3DVis_QScene3D::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtStackedBars3D_qt_metaobject(sipPySelf,sipType_QtStackedBar3DVis_QScene3D);

    return  ::QtStackedBar3DVis::QScene3D::metaObject();
}

int sipQtStackedBar3DVis_QScene3D::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QtStackedBar3DVis::QScene3D::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtStackedBars3D_qt_metacall(sipPySelf,sipType_QtStackedBar3DVis_QScene3D,_c,_id,_a);

    return _id;
}

void *sipQtStackedBar3DVis_QScene3D::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtStackedBars3D_qt_metacast(sipPySelf, sipType_QtStackedBar3DVis_QScene3D, _clname, &sipCpp) ? sipCpp :  ::QtStackedBar3DVis::QScene3D::qt_metacast(_clname));
}

bool sipQtStackedBar3DVis_QScene3D::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QtStackedBar3DVis::QScene3D::event(a0);

    extern bool sipVH_QtStackedBars3D_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtStackedBars3D_15(sipGILState, sipImportedVirtErrorHandlers_QtStackedBars3D_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQtStackedBar3DVis_QScene3D::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QtStackedBar3DVis::QScene3D::eventFilter(a0,a1);

    extern bool sipVH_QtStackedBars3D_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtStackedBars3D_16(sipGILState, sipImportedVirtErrorHandlers_QtStackedBars3D_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQtStackedBar3DVis_QScene3D::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QtStackedBar3DVis::QScene3D::timerEvent(a0);
        return;
    }

    extern void sipVH_QtStackedBars3D_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtStackedBars3D_17(sipGILState, sipImportedVirtErrorHandlers_QtStackedBars3D_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQtStackedBar3DVis_QScene3D::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QtStackedBar3DVis::QScene3D::childEvent(a0);
        return;
    }

    extern void sipVH_QtStackedBars3D_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtStackedBars3D_18(sipGILState, sipImportedVirtErrorHandlers_QtStackedBars3D_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQtStackedBar3DVis_QScene3D::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QtStackedBar3DVis::QScene3D::customEvent(a0);
        return;
    }

    extern void sipVH_QtStackedBars3D_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtStackedBars3D_19(sipGILState, sipImportedVirtErrorHandlers_QtStackedBars3D_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQtStackedBar3DVis_QScene3D::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QtStackedBar3DVis::QScene3D::connectNotify(a0);
        return;
    }

    extern void sipVH_QtStackedBars3D_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtStackedBars3D_20(sipGILState, sipImportedVirtErrorHandlers_QtStackedBars3D_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQtStackedBar3DVis_QScene3D::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QtStackedBar3DVis::QScene3D::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtStackedBars3D_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtStackedBars3D_20(sipGILState, sipImportedVirtErrorHandlers_QtStackedBars3D_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_viewport, "viewport(self) -> QRect");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_viewport(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_viewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->viewport());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_viewport, doc_QtStackedBar3DVis_QScene3D_viewport);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_primarySubViewport, "primarySubViewport(self) -> QRect");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_primarySubViewport(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_primarySubViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->primarySubViewport());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_primarySubViewport, doc_QtStackedBar3DVis_QScene3D_primarySubViewport);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_setPrimarySubViewport, "setPrimarySubViewport(self, QRect)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_setPrimarySubViewport(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_setPrimarySubViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QRect* a0;
         ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setPrimarySubViewport(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_setPrimarySubViewport, doc_QtStackedBar3DVis_QScene3D_setPrimarySubViewport);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_isPointInPrimarySubView, "isPointInPrimarySubView(self, QPoint) -> bool");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_isPointInPrimarySubView(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_isPointInPrimarySubView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
         ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp, sipType_QPoint, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isPointInPrimarySubView(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_isPointInPrimarySubView, doc_QtStackedBar3DVis_QScene3D_isPointInPrimarySubView);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_secondarySubViewport, "secondarySubViewport(self) -> QRect");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_secondarySubViewport(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_secondarySubViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->secondarySubViewport());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_secondarySubViewport, doc_QtStackedBar3DVis_QScene3D_secondarySubViewport);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_setSecondarySubViewport, "setSecondarySubViewport(self, QRect)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_setSecondarySubViewport(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_setSecondarySubViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QRect* a0;
         ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setSecondarySubViewport(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_setSecondarySubViewport, doc_QtStackedBar3DVis_QScene3D_setSecondarySubViewport);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_isPointInSecondarySubView, "isPointInSecondarySubView(self, QPoint) -> bool");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_isPointInSecondarySubView(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_isPointInSecondarySubView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
         ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp, sipType_QPoint, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isPointInSecondarySubView(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_isPointInSecondarySubView, doc_QtStackedBar3DVis_QScene3D_isPointInSecondarySubView);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_setSelectionQueryPosition, "setSelectionQueryPosition(self, QPoint)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_setSelectionQueryPosition(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_setSelectionQueryPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
         ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setSelectionQueryPosition(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_setSelectionQueryPosition, doc_QtStackedBar3DVis_QScene3D_setSelectionQueryPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_selectionQueryPosition, "selectionQueryPosition(self) -> QPoint");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_selectionQueryPosition(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_selectionQueryPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->selectionQueryPosition());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_selectionQueryPosition, doc_QtStackedBar3DVis_QScene3D_selectionQueryPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_invalidSelectionPoint, "invalidSelectionPoint() -> QPoint");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_invalidSelectionPoint(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_invalidSelectionPoint(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint( ::QtStackedBar3DVis::QScene3D::invalidSelectionPoint());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_invalidSelectionPoint, doc_QtStackedBar3DVis_QScene3D_invalidSelectionPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_setSlicingActive, "setSlicingActive(self, bool)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_setSlicingActive(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_setSlicingActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp, &a0))
        {
            sipCpp->setSlicingActive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_setSlicingActive, doc_QtStackedBar3DVis_QScene3D_setSlicingActive);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_isSlicingActive, "isSlicingActive(self) -> bool");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_isSlicingActive(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_isSlicingActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSlicingActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_isSlicingActive, doc_QtStackedBar3DVis_QScene3D_isSlicingActive);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_setSecondarySubviewOnTop, "setSecondarySubviewOnTop(self, bool)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_setSecondarySubviewOnTop(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_setSecondarySubviewOnTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp, &a0))
        {
            sipCpp->setSecondarySubviewOnTop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_setSecondarySubviewOnTop, doc_QtStackedBar3DVis_QScene3D_setSecondarySubviewOnTop);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_isSecondarySubviewOnTop, "isSecondarySubviewOnTop(self) -> bool");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_isSecondarySubviewOnTop(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_isSecondarySubviewOnTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSecondarySubviewOnTop();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_isSecondarySubviewOnTop, doc_QtStackedBar3DVis_QScene3D_isSecondarySubviewOnTop);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_activeCamera, "activeCamera(self) -> QtStackedBar3DVis.QCamera3D");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_activeCamera(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_activeCamera(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp))
        {
             ::QtStackedBar3DVis::QCamera3D*sipRes;

            sipRes = sipCpp->activeCamera();

            return sipConvertFromType(sipRes,sipType_QtStackedBar3DVis_QCamera3D,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_activeCamera, doc_QtStackedBar3DVis_QScene3D_activeCamera);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_setActiveCamera, "setActiveCamera(self, QtStackedBar3DVis.QCamera3D)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_setActiveCamera(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_setActiveCamera(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QtStackedBar3DVis::QCamera3D* a0;
         ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp, sipType_QtStackedBar3DVis_QCamera3D, &a0))
        {
            sipCpp->setActiveCamera(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_setActiveCamera, doc_QtStackedBar3DVis_QScene3D_setActiveCamera);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_activeLight, "activeLight(self) -> QtStackedBar3DVis.QLight3D");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_activeLight(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_activeLight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp))
        {
             ::QtStackedBar3DVis::QLight3D*sipRes;

            sipRes = sipCpp->activeLight();

            return sipConvertFromType(sipRes,sipType_QtStackedBar3DVis_QLight3D,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_activeLight, doc_QtStackedBar3DVis_QScene3D_activeLight);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_setActiveLight, "setActiveLight(self, QtStackedBar3DVis.QLight3D)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_setActiveLight(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_setActiveLight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QtStackedBar3DVis::QLight3D* a0;
         ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp, sipType_QtStackedBar3DVis_QLight3D, &a0))
        {
            sipCpp->setActiveLight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_setActiveLight, doc_QtStackedBar3DVis_QScene3D_setActiveLight);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_devicePixelRatio, "devicePixelRatio(self) -> float");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_devicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_devicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->devicePixelRatio();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_devicePixelRatio, doc_QtStackedBar3DVis_QScene3D_devicePixelRatio);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_setDevicePixelRatio, "setDevicePixelRatio(self, float)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_setDevicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_setDevicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
         ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp, &a0))
        {
            sipCpp->setDevicePixelRatio(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_setDevicePixelRatio, doc_QtStackedBar3DVis_QScene3D_setDevicePixelRatio);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_setGraphPositionQuery, "setGraphPositionQuery(self, QPoint)");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_setGraphPositionQuery(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_setGraphPositionQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
         ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setGraphPositionQuery(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_setGraphPositionQuery, doc_QtStackedBar3DVis_QScene3D_setGraphPositionQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D_graphPositionQuery, "graphPositionQuery(self) -> QPoint");

extern "C" {static PyObject *meth_QtStackedBar3DVis_QScene3D_graphPositionQuery(PyObject *, PyObject *);}
static PyObject *meth_QtStackedBar3DVis_QScene3D_graphPositionQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QtStackedBar3DVis::QScene3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QtStackedBar3DVis_QScene3D, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->graphPositionQuery());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScene3D, sipName_graphPositionQuery, doc_QtStackedBar3DVis_QScene3D_graphPositionQuery);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QtStackedBar3DVis_QScene3D(void *, const sipTypeDef *);}
static void *cast_QtStackedBar3DVis_QScene3D(void *sipCppV, const sipTypeDef *targetType)
{
     ::QtStackedBar3DVis::QScene3D *sipCpp = reinterpret_cast< ::QtStackedBar3DVis::QScene3D *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QtStackedBar3DVis_QScene3D(void *, int);}
static void release_QtStackedBar3DVis_QScene3D(void *sipCppV, int)
{
     ::QtStackedBar3DVis::QScene3D *sipCpp = reinterpret_cast< ::QtStackedBar3DVis::QScene3D *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QtStackedBar3DVis_QScene3D(sipSimpleWrapper *);}
static void dealloc_QtStackedBar3DVis_QScene3D(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQtStackedBar3DVis_QScene3D *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QtStackedBar3DVis_QScene3D(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QtStackedBar3DVis_QScene3D(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QtStackedBar3DVis_QScene3D(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQtStackedBar3DVis_QScene3D *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQtStackedBar3DVis_QScene3D(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QtStackedBar3DVis_QScene3D[] = {{4, 0, 1}};


static PyMethodDef methods_QtStackedBar3DVis_QScene3D[] = {
    {SIP_MLNAME_CAST(sipName_activeCamera), meth_QtStackedBar3DVis_QScene3D_activeCamera, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_activeCamera)},
    {SIP_MLNAME_CAST(sipName_activeLight), meth_QtStackedBar3DVis_QScene3D_activeLight, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_activeLight)},
    {SIP_MLNAME_CAST(sipName_devicePixelRatio), meth_QtStackedBar3DVis_QScene3D_devicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_devicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_graphPositionQuery), meth_QtStackedBar3DVis_QScene3D_graphPositionQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_graphPositionQuery)},
    {SIP_MLNAME_CAST(sipName_invalidSelectionPoint), meth_QtStackedBar3DVis_QScene3D_invalidSelectionPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_invalidSelectionPoint)},
    {SIP_MLNAME_CAST(sipName_isPointInPrimarySubView), meth_QtStackedBar3DVis_QScene3D_isPointInPrimarySubView, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_isPointInPrimarySubView)},
    {SIP_MLNAME_CAST(sipName_isPointInSecondarySubView), meth_QtStackedBar3DVis_QScene3D_isPointInSecondarySubView, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_isPointInSecondarySubView)},
    {SIP_MLNAME_CAST(sipName_isSecondarySubviewOnTop), meth_QtStackedBar3DVis_QScene3D_isSecondarySubviewOnTop, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_isSecondarySubviewOnTop)},
    {SIP_MLNAME_CAST(sipName_isSlicingActive), meth_QtStackedBar3DVis_QScene3D_isSlicingActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_isSlicingActive)},
    {SIP_MLNAME_CAST(sipName_primarySubViewport), meth_QtStackedBar3DVis_QScene3D_primarySubViewport, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_primarySubViewport)},
    {SIP_MLNAME_CAST(sipName_secondarySubViewport), meth_QtStackedBar3DVis_QScene3D_secondarySubViewport, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_secondarySubViewport)},
    {SIP_MLNAME_CAST(sipName_selectionQueryPosition), meth_QtStackedBar3DVis_QScene3D_selectionQueryPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_selectionQueryPosition)},
    {SIP_MLNAME_CAST(sipName_setActiveCamera), meth_QtStackedBar3DVis_QScene3D_setActiveCamera, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_setActiveCamera)},
    {SIP_MLNAME_CAST(sipName_setActiveLight), meth_QtStackedBar3DVis_QScene3D_setActiveLight, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_setActiveLight)},
    {SIP_MLNAME_CAST(sipName_setDevicePixelRatio), meth_QtStackedBar3DVis_QScene3D_setDevicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_setDevicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_setGraphPositionQuery), meth_QtStackedBar3DVis_QScene3D_setGraphPositionQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_setGraphPositionQuery)},
    {SIP_MLNAME_CAST(sipName_setPrimarySubViewport), meth_QtStackedBar3DVis_QScene3D_setPrimarySubViewport, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_setPrimarySubViewport)},
    {SIP_MLNAME_CAST(sipName_setSecondarySubViewport), meth_QtStackedBar3DVis_QScene3D_setSecondarySubViewport, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_setSecondarySubViewport)},
    {SIP_MLNAME_CAST(sipName_setSecondarySubviewOnTop), meth_QtStackedBar3DVis_QScene3D_setSecondarySubviewOnTop, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_setSecondarySubviewOnTop)},
    {SIP_MLNAME_CAST(sipName_setSelectionQueryPosition), meth_QtStackedBar3DVis_QScene3D_setSelectionQueryPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_setSelectionQueryPosition)},
    {SIP_MLNAME_CAST(sipName_setSlicingActive), meth_QtStackedBar3DVis_QScene3D_setSlicingActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_setSlicingActive)},
    {SIP_MLNAME_CAST(sipName_viewport), meth_QtStackedBar3DVis_QScene3D_viewport, METH_VARARGS, SIP_MLDOC_CAST(doc_QtStackedBar3DVis_QScene3D_viewport)}
};

PyDoc_STRVAR(doc_QtStackedBar3DVis_QScene3D, "\1QtStackedBar3DVis.QScene3D(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QtStackedBar3DVis_QScene3D[] = {
    {"graphPositionQueryChanged(QPoint)", "\1graphPositionQueryChanged(self, QPoint)", 0, 0},
    {"selectionQueryPositionChanged(QPoint)", "\1selectionQueryPositionChanged(self, QPoint)", 0, 0},
    {"devicePixelRatioChanged(float)", "\1devicePixelRatioChanged(self, float)", 0, 0},
    {"activeLightChanged(QLight3D*)|(QtStackedBar3DVis::QLight3D*)", "\1activeLightChanged(self, QtStackedBar3DVis.QLight3D)", 0, 0},
    {"activeCameraChanged(QCamera3D*)|(QtStackedBar3DVis::QCamera3D*)", "\1activeCameraChanged(self, QtStackedBar3DVis.QCamera3D)", 0, 0},
    {"slicingActiveChanged(bool)", "\1slicingActiveChanged(self, bool)", 0, 0},
    {"secondarySubviewOnTopChanged(bool)", "\1secondarySubviewOnTopChanged(self, bool)", 0, 0},
    {"secondarySubViewportChanged(QRect)", "\1secondarySubViewportChanged(self, QRect)", 0, 0},
    {"primarySubViewportChanged(QRect)", "\1primarySubViewportChanged(self, QRect)", 0, 0},
    {"viewportChanged(QRect)", "\1viewportChanged(self, QRect)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QtStackedBar3DVis_QScene3D = {
    & ::QtStackedBar3DVis::QScene3D::staticMetaObject,
    0,
    signals_QtStackedBar3DVis_QScene3D,
    0
};


sipClassTypeDef sipTypeDef_QtStackedBars3D_QtStackedBar3DVis_QScene3D = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QtStackedBar3DVis__QScene3D,
        {0},
        &plugin_QtStackedBar3DVis_QScene3D
    },
    {
        sipNameNr_QScene3D,
        {11, 255, 0},
        22, methods_QtStackedBar3DVis_QScene3D,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QtStackedBar3DVis_QScene3D,
    -1,
    -1,
    supers_QtStackedBar3DVis_QScene3D,
    0,
    init_type_QtStackedBar3DVis_QScene3D,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QtStackedBar3DVis_QScene3D,
    0,
    0,
    0,
    release_QtStackedBar3DVis_QScene3D,
    cast_QtStackedBar3DVis_QScene3D,
    0,
    0,
    0,
    0,
    0,
    0
};
